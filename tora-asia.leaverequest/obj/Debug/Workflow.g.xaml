<?xml version="1.0" encoding="utf-8"?>
<tlwl:Workflow xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:msdad="clr-namespace:Microsoft.SharePoint.DesignTime.Activities.Design;assembly=Microsoft.SharePoint.DesignTime.Activities.16.0.Design" xmlns:p="wf://workflow.windows.net/$Activities" xmlns:p1="http://schemas.microsoft.com/workflow/2012/07/xaml/activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:tlwl="clr-namespace:tora_asia.leaverequest.Workflows.LeaveReqeustWF;assembly=tora-asia.leaverequest" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>Microsoft.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Activities.Design</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities.16.0</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities.16.0.Design</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>tora-asia.leaverequest</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <tlwl:Workflow.Implementation>
    <StateMachine>
      <StateMachine.InitialState>
        <State x:Name="__ReferenceID4" DisplayName="Get List Info">
          <State.Entry>
            <p:AppOnlySequence>
              <p:AppOnlySequence.Body>
                <p:WriteToHistory Message="Workflow Start" />
              </p:AppOnlySequence.Body>
            </p:AppOnlySequence>
          </State.Entry>
          <State.Exit>
            <p:AppOnlySequence>
              <p:AppOnlySequence.Body>
                <Sequence>
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:String" Name="currentListName" />
                  </Sequence.Variables>
                  <p:LookupWorkflowContextProperty DisplayName="Get Current Site Url" PropertyName="CurrentWebUrl">
                    <p:LookupWorkflowContextProperty.Result>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">CurrentSiteUrl</mca:CSharpReference>
                      </OutArgument>
                    </p:LookupWorkflowContextProperty.Result>
                  </p:LookupWorkflowContextProperty>
                  <p:GetCurrentItemId DisplayName="Get Current Item ID">
                    <p:GetCurrentItemId.Result>
                      <OutArgument x:TypeArguments="x:Int32">
                        <mca:CSharpReference x:TypeArguments="x:Int32">CurrentItemID</mca:CSharpReference>
                      </OutArgument>
                    </p:GetCurrentItemId.Result>
                  </p:GetCurrentItemId>
                  <p:LookupWorkflowContextProperty DisplayName="Get Current List ID" PropertyName="ListId">
                    <p:LookupWorkflowContextProperty.Result>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">CurrentListID</mca:CSharpReference>
                      </OutArgument>
                    </p:LookupWorkflowContextProperty.Result>
                  </p:LookupWorkflowContextProperty>
                  <p:LookupWorkflowContextProperty DisplayName="Get Current List Name" PropertyName="ListName">
                    <p:LookupWorkflowContextProperty.Result>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">currentListName</mca:CSharpReference>
                      </OutArgument>
                    </p:LookupWorkflowContextProperty.Result>
                  </p:LookupWorkflowContextProperty>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:Guid">
                        <mca:CSharpReference x:TypeArguments="s:Guid">CurrentListGUID</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:Guid">
                        <mca:CSharpValue x:TypeArguments="s:Guid">new Guid(CurrentListID)</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <p:WriteToHistory>
                    <p:WriteToHistory.Message>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"List : "+CurrentListID+"\r\n"+
"ItemID : "+CurrentItemID</mca:CSharpValue>
                      </InArgument>
                    </p:WriteToHistory.Message>
                  </p:WriteToHistory>
                </Sequence>
              </p:AppOnlySequence.Body>
            </p:AppOnlySequence>
          </State.Exit>
          <State.Transitions>
            <Transition DisplayName="T1">
              <Transition.To>
                <State x:Name="__ReferenceID6" DisplayName="Get RequestType">
                  <State.Entry>
                    <Sequence>
                      <Sequence.Variables>
                        <Variable x:TypeArguments="p1:DynamicValue" Name="dv_0" />
                      </Sequence.Variables>
                      <p:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}">
                        <p:LookupSPListItem.ItemId>
                          <InArgument x:TypeArguments="x:Int32">
                            <mca:CSharpValue x:TypeArguments="x:Int32">CurrentItemID</mca:CSharpValue>
                          </InArgument>
                        </p:LookupSPListItem.ItemId>
                        <p:LookupSPListItem.ListId>
                          <InArgument x:TypeArguments="s:Guid">
                            <mca:CSharpValue x:TypeArguments="s:Guid">CurrentListGUID</mca:CSharpValue>
                          </InArgument>
                        </p:LookupSPListItem.ListId>
                        <p:LookupSPListItem.Result>
                          <OutArgument x:TypeArguments="p1:DynamicValue">
                            <mca:CSharpReference x:TypeArguments="p1:DynamicValue">dv_0</mca:CSharpReference>
                          </OutArgument>
                        </p:LookupSPListItem.Result>
                      </p:LookupSPListItem>
                      <p1:GetODataProperties DisplayName="GetDynamicValueProperties">
                        <p1:GetODataProperties.Source>
                          <InArgument x:TypeArguments="p1:DynamicValue">
                            <mca:CSharpValue x:TypeArguments="p1:DynamicValue">dv_0</mca:CSharpValue>
                          </InArgument>
                        </p1:GetODataProperties.Source>
                        <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                          <OutArgument x:TypeArguments="x:String" x:Key="RequestType">
                            <mca:CSharpReference x:TypeArguments="x:String">RequestType</mca:CSharpReference>
                          </OutArgument>
                          <OutArgument x:TypeArguments="x:String" x:Key="CurrentAppUrl">
                            <mca:CSharpReference x:TypeArguments="x:String">CurrentAppUrl</mca:CSharpReference>
                          </OutArgument>
                          <OutArgument x:TypeArguments="x:String" x:Key="CurrentHostUrl">
                            <mca:CSharpReference x:TypeArguments="x:String">CurrentHostUrl</mca:CSharpReference>
                          </OutArgument>
                          <OutArgument x:TypeArguments="x:String" x:Key="CurrentUrl">
                            <mca:CSharpReference x:TypeArguments="x:String">CurrentUrl</mca:CSharpReference>
                          </OutArgument>
                        </scg:Dictionary>
                      </p1:GetODataProperties>
                      <p:WriteToHistory>
                        <p:WriteToHistory.Message>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">CurrentUrl+"\r\n"+
CurrentHostUrl + "\r\n"+
CurrentAppUrl + "\r\n"</mca:CSharpValue>
                          </InArgument>
                        </p:WriteToHistory.Message>
                      </p:WriteToHistory>
                    </Sequence>
                  </State.Entry>
                  <State.Transitions>
                    <Transition DisplayName="T5">
                      <Transition.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">RequestType.ToLower().Equals("new")</mca:CSharpValue>
                      </Transition.Condition>
                      <Transition.To>
                        <State x:Name="__ReferenceID5" DisplayName="Set Status to Inprogress (New)">
                          <State.Entry>
                            <Sequence>
                              <p:AppOnlySequence>
                                <p:AppOnlySequence.Body>
                                  <Sequence>
                                    <p:WriteToHistory Message="Request : New" />
                                    <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                      <p:UpdateListItem.ItemId>
                                        <InArgument x:TypeArguments="x:Int32">
                                          <mca:CSharpValue x:TypeArguments="x:Int32">CurrentItemID</mca:CSharpValue>
                                        </InArgument>
                                      </p:UpdateListItem.ItemId>
                                      <p:UpdateListItem.ListId>
                                        <InArgument x:TypeArguments="s:Guid">
                                          <mca:CSharpValue x:TypeArguments="s:Guid">CurrentListGUID</mca:CSharpValue>
                                        </InArgument>
                                      </p:UpdateListItem.ListId>
                                      <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                        <InArgument x:TypeArguments="p1:DynamicValue">
                                          <p1:SetDynamicValueProperties>
                                            <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                              <InArgument x:TypeArguments="x:String" x:Key="LeaveStatus">In Progress</InArgument>
                                            </scg:Dictionary>
                                          </p1:SetDynamicValueProperties>
                                        </InArgument>
                                      </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                    </p:UpdateListItem>
                                    <p1:SetUserStatus Description="In Progress" DisplayName="Set In Progress" />
                                  </Sequence>
                                </p:AppOnlySequence.Body>
                              </p:AppOnlySequence>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">
                                    <mca:CSharpReference x:TypeArguments="x:String">ApproveStatus</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">In Progress</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </State.Entry>
                          <State.Transitions>
                            <Transition DisplayName="T2">
                              <Transition.To>
                                <State x:Name="__ReferenceID3" DisplayName="Get Item Information">
                                  <State.Exit>
                                    <p:AppOnlySequence>
                                      <p:AppOnlySequence.Body>
                                        <Sequence>
                                          <Sequence.Variables>
                                            <Variable x:TypeArguments="p1:DynamicValue" Name="listItemProps" />
                                            <Variable x:TypeArguments="sco:Collection(x:Int32)" Name="testCollectionInt" />
                                            <Variable x:TypeArguments="x:String" Name="hrarray" />
                                          </Sequence.Variables>
                                          <p:WriteToHistory Message="Step Get Information" />
                                          <p:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}">
                                            <p:LookupSPListItem.ItemId>
                                              <InArgument x:TypeArguments="x:Int32">
                                                <mca:CSharpValue x:TypeArguments="x:Int32">CurrentItemID</mca:CSharpValue>
                                              </InArgument>
                                            </p:LookupSPListItem.ItemId>
                                            <p:LookupSPListItem.ListId>
                                              <InArgument x:TypeArguments="s:Guid">
                                                <mca:CSharpValue x:TypeArguments="s:Guid">CurrentListGUID</mca:CSharpValue>
                                              </InArgument>
                                            </p:LookupSPListItem.ListId>
                                            <p:LookupSPListItem.Result>
                                              <OutArgument x:TypeArguments="p1:DynamicValue">
                                                <mca:CSharpReference x:TypeArguments="p1:DynamicValue">listItemProps</mca:CSharpReference>
                                              </OutArgument>
                                            </p:LookupSPListItem.Result>
                                          </p:LookupSPListItem>
                                          <p1:GetODataProperties DisplayName="GetDynamicValueProperties">
                                            <p1:GetODataProperties.Source>
                                              <InArgument x:TypeArguments="p1:DynamicValue">
                                                <mca:CSharpValue x:TypeArguments="p1:DynamicValue">listItemProps</mca:CSharpValue>
                                              </InArgument>
                                            </p1:GetODataProperties.Source>
                                            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                                              <OutArgument x:TypeArguments="x:String" x:Key="OfficerApproverStringId">
                                                <mca:CSharpReference x:TypeArguments="x:String">OfficerManager</mca:CSharpReference>
                                              </OutArgument>
                                              <OutArgument x:TypeArguments="p1:DynamicValue" x:Key="OfficerHrStringId">
                                                <mca:CSharpReference x:TypeArguments="p1:DynamicValue">dynamichr</mca:CSharpReference>
                                              </OutArgument>
                                              <OutArgument x:TypeArguments="x:String" x:Key="Title">
                                                <mca:CSharpReference x:TypeArguments="x:String">Title</mca:CSharpReference>
                                              </OutArgument>
                                              <OutArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                                <mca:CSharpReference x:TypeArguments="x:String">LeaveType</mca:CSharpReference>
                                              </OutArgument>
                                              <OutArgument x:TypeArguments="x:Double" x:Key="LeaveDayTotal">
                                                <mca:CSharpReference x:TypeArguments="x:Double">NumberOfDay</mca:CSharpReference>
                                              </OutArgument>
                                              <OutArgument x:TypeArguments="x:String" x:Key="LeaveStatus">
                                                <mca:CSharpReference x:TypeArguments="x:String">LeaveStatus</mca:CSharpReference>
                                              </OutArgument>
                                              <OutArgument x:TypeArguments="x:String" x:Key="RequesterStringId">
                                                <mca:CSharpReference x:TypeArguments="x:String">RequesterId</mca:CSharpReference>
                                              </OutArgument>
                                            </scg:Dictionary>
                                          </p1:GetODataProperties>
                                          <If>
                                            <If.Condition>
                                              <InArgument x:TypeArguments="x:Boolean">
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">dynamichr != null</mca:CSharpValue>
                                              </InArgument>
                                            </If.Condition>
                                            <If.Then>
                                              <Sequence>
                                                <p1:GetODataProperties DisplayName="GetDynamicValueProperties">
                                                  <p1:GetODataProperties.Source>
                                                    <InArgument x:TypeArguments="p1:DynamicValue">
                                                      <mca:CSharpValue x:TypeArguments="p1:DynamicValue">dynamichr</mca:CSharpValue>
                                                    </InArgument>
                                                  </p1:GetODataProperties.Source>
                                                  <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                                                    <OutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="results">
                                                      <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">listHrApprove</mca:CSharpReference>
                                                    </OutArgument>
                                                  </scg:Dictionary>
                                                </p1:GetODataProperties>
                                                <p:WriteToHistory>
                                                  <p:WriteToHistory.Message>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">dynamichr.ToString()</mca:CSharpValue>
                                                    </InArgument>
                                                  </p:WriteToHistory.Message>
                                                </p:WriteToHistory>
                                              </Sequence>
                                            </If.Then>
                                          </If>
                                          <p:WriteToHistory>
                                            <p:WriteToHistory.Message>
                                              <InArgument x:TypeArguments="x:String">
                                                <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"RequesterId ID in Get Info : " + RequesterId +
"\r\nManager ID in Get Info : " +OfficerManager+
"\r\nHR ID in Get Info : " + listHrApprove.Count</mca:CSharpValue>
                                              </InArgument>
                                            </p:WriteToHistory.Message>
                                          </p:WriteToHistory>
                                        </Sequence>
                                      </p:AppOnlySequence.Body>
                                    </p:AppOnlySequence>
                                  </State.Exit>
                                  <State.Transitions>
                                    <Transition DisplayName="T3">
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RequestType.ToLower().Equals("new")</mca:CSharpValue>
                                      </Transition.Condition>
                                      <Transition.To>
                                        <State x:Name="__ReferenceID8" DisplayName="Manager Title Body (New)">
                                          <State.Entry>
                                            <Sequence>
                                              <Sequence DisplayName="Manager">
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">TitleManagerEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"แจ้งการขออนุมัติการลาของ " + Title</mca:CSharpValue>
                                                    </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">BodyManagerEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"กรุณาพิจารณา การลา " + LeaveType + " ของ " +Title</mca:CSharpValue>
                                                    </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                              </Sequence>
                                              <Sequence DisplayName="Requester">
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">TitleRequesterEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">แจ้งผลการขออนุมัติการลา</InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">BodyRequesterEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String" xml:space="preserve">ผู้อนุมัติได้พิจารณา </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                              </Sequence>
                                              <Sequence DisplayName="HR">
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">TitleHREmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Review : แจ้งผลการขออนุมัติการลาของ "+Title</mca:CSharpValue>
                                                    </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">BodyHrEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"ตามที่ "+ Title + "ได้ขออนุมัติการลา "+LeaveType+" โดยมีผลการพิจารณา คือ "</mca:CSharpValue>
                                                    </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                              </Sequence>
                                            </Sequence>
                                          </State.Entry>
                                          <State.Transitions>
                                            <Transition DisplayName="T11">
                                              <Transition.To>
                                                <State x:Name="__ReferenceID2" DisplayName="Send  Task">
                                                  <State.Entry>
                                                    <Sequence>
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="x:Int32">
                                                            <mca:CSharpReference x:TypeArguments="x:Int32">iscancelstate</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="x:Boolean">
                                                            <mca:CSharpReference x:TypeArguments="x:Boolean">iscompleteParallel</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                      <Parallel>
                                                        <Parallel.CompletionCondition>
                                                          <mca:CSharpValue x:TypeArguments="x:Boolean">iscompleteParallel</mca:CSharpValue>
                                                        </Parallel.CompletionCondition>
                                                        <TryCatch>
                                                          <TryCatch.Variables>
                                                            <Variable x:TypeArguments="x:Int32" Name="errorindex" />
                                                            <Variable x:TypeArguments="x:Int32" Name="errormax" />
                                                            <Variable x:TypeArguments="x:Int32" Name="errorlen" />
                                                          </TryCatch.Variables>
                                                          <TryCatch.Try>
                                                            <p:AppOnlySequence DisplayName="AppOnlySequence Task to Controller">
                                                              <p:AppOnlySequence.Body>
                                                                <Sequence>
                                                                  <p:WriteToHistory>
                                                                    <p:WriteToHistory.Message>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"--Manager ID in Send Task : "+OfficerManager+
"--HR ID in Send Task : " + listHrApprove.Count +
"--Title in Send Task : " + Title + 
"--LeaveStatus in Send Task : " + LeaveStatus + 
"--LeaveType in Send Task : " + LeaveType</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </p:WriteToHistory.Message>
                                                                  </p:WriteToHistory>
                                                                  <p1:BuildCollection x:TypeArguments="x:String">
                                                                    <p1:BuildCollection.Result>
                                                                      <OutArgument x:TypeArguments="sco:Collection(x:String)">
                                                                        <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">EmailToRequester</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </p1:BuildCollection.Result>
                                                                    <p1:BuildCollection.Values>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">RequesterId</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </p1:BuildCollection.Values>
                                                                  </p1:BuildCollection>
                                                                  <If>
                                                                    <If.Condition>
                                                                      <InArgument x:TypeArguments="x:Boolean">
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">!string.IsNullOrEmpty(OfficerManager)</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </If.Condition>
                                                                    <If.Then>
                                                                      <Sequence>
                                                                        <Sequence.Variables>
                                                                          <Variable x:TypeArguments="x:Int32" Name="outcome_0" />
                                                                          <Variable x:TypeArguments="x:Int32" Name="outcome_1" />
                                                                        </Sequence.Variables>
                                                                        <p:WriteToHistory Message="Start send task" />
                                                                        <p:WriteToHistory>
                                                                          <p:WriteToHistory.Message>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">TitleManagerEmail</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </p:WriteToHistory.Message>
                                                                        </p:WriteToHistory>
                                                                        <p:WriteToHistory>
                                                                          <p:WriteToHistory.Message>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">BodyManagerEmail</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </p:WriteToHistory.Message>
                                                                        </p:WriteToHistory>
                                                                        <p:SingleTask DueDate="{x:Null}" TaskId="{x:Null}" TaskItemId="{x:Null}" CancelationEmailBody="เนื่องจากผู้ขออนุมัติได้ยกเลิกการขออนุมัติการลา จึงแจ้งมาเพื่อทราบ&lt;br/&gt;" CompletedStatus="Completed" ContentTypeId="0x0108003365C4474CAE8C42BCE396314E88E51F" DefaultTaskOutcome="0" OutcomeFieldName="TaskOutcome" OverdueEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have an &lt;/span&gt;&lt;span style='font-size:13.5pt;color:#ff3b3b;'&gt;overdue&lt;/span&gt;&lt;span style='font-size:13.5pt'&gt; task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" OverdueEmailSubject="Task Overdue" OverdueReminderRepeat="1" OverdueRepeatTimes="1" PreserveIncompleteTasks="False" SendReminderEmail="True" WaitForTaskCompletion="True" WaiveAssignmentEmail="False" WaiveCancelationEmail="False">
                                                                          <p:SingleTask.AssignedTo>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">OfficerManager</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </p:SingleTask.AssignedTo>
                                                                          <p:SingleTask.AssignmentEmailBody>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">BodyManagerEmail + "  " + "&lt;a href='" + CurrentUrl + "?SPHostUrl=" + CurrentHostUrl + "&amp;SPAppWebUrl=" + CurrentAppUrl + "&amp;CaseView=0&amp;CurItemId=" + CurrentItemID + "&amp;TaskUrl=%TaskSpecial: TaskUrl%'&gt;รายละเอียด&lt;/a&gt;&lt;br/&gt;"</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </p:SingleTask.AssignmentEmailBody>
                                                                          <p:SingleTask.AssignmentEmailSubject>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">TitleManagerEmail</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </p:SingleTask.AssignmentEmailSubject>
                                                                          <p:SingleTask.Body>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">BodyManagerEmail</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </p:SingleTask.Body>
                                                                          <p:SingleTask.CancelationEmailSubject>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">"แจ้งยกเลิกการขออนุมัติการลาของ " + Title</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </p:SingleTask.CancelationEmailSubject>
                                                                          <p:SingleTask.Outcome>
                                                                            <OutArgument x:TypeArguments="x:Int32">
                                                                              <mca:CSharpReference x:TypeArguments="x:Int32">outcome_0</mca:CSharpReference>
                                                                            </OutArgument>
                                                                          </p:SingleTask.Outcome>
                                                                          <p:SingleTask.RelatedContentLinkListId>
                                                                            <InArgument x:TypeArguments="s:Guid">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="s:Guid">
                                                                                <p:GetCurrentListId />
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </p:SingleTask.RelatedContentLinkListId>
                                                                          <p:SingleTask.RelatedContentLinkListItemId>
                                                                            <InArgument x:TypeArguments="s:Guid">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="s:Guid">
                                                                                <p:GetCurrentItemGuid />
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </p:SingleTask.RelatedContentLinkListItemId>
                                                                          <p:SingleTask.RelatedContentLinkListItemIntegerId>
                                                                            <InArgument x:TypeArguments="x:Int32">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="x:Int32">
                                                                                <p:GetCurrentItemId />
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </p:SingleTask.RelatedContentLinkListItemIntegerId>
                                                                          <p:SingleTask.Title>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">TitleManagerEmail</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </p:SingleTask.Title>
                                                                        </p:SingleTask>
                                                                        <p:WriteToHistory>
                                                                          <p:WriteToHistory.Message>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">"Output :" + outcome_0.ToString()</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </p:WriteToHistory.Message>
                                                                        </p:WriteToHistory>
                                                                        <Sequence DisplayName="Check Status of Task">
                                                                          <If>
                                                                            <If.Condition>
                                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">outcome_0 == 0</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </If.Condition>
                                                                            <If.Then>
                                                                              <Sequence>
                                                                                <If>
                                                                                  <If.Condition>
                                                                                    <InArgument x:TypeArguments="x:Boolean">
                                                                                      <mca:CSharpValue x:TypeArguments="x:Boolean">RequestType.ToLower().Equals("new")</mca:CSharpValue>
                                                                                    </InArgument>
                                                                                  </If.Condition>
                                                                                  <If.Then>
                                                                                    <Sequence>
                                                                                      <Assign>
                                                                                        <Assign.To>
                                                                                          <OutArgument x:TypeArguments="x:String">
                                                                                            <mca:CSharpReference x:TypeArguments="x:String">setStatusRequest</mca:CSharpReference>
                                                                                          </OutArgument>
                                                                                        </Assign.To>
                                                                                        <Assign.Value>
                                                                                          <InArgument x:TypeArguments="x:String">Approved</InArgument>
                                                                                        </Assign.Value>
                                                                                      </Assign>
                                                                                    </Sequence>
                                                                                  </If.Then>
                                                                                  <If.Else>
                                                                                    <Sequence>
                                                                                      <Assign>
                                                                                        <Assign.To>
                                                                                          <OutArgument x:TypeArguments="x:String">
                                                                                            <mca:CSharpReference x:TypeArguments="x:String">setStatusRequest</mca:CSharpReference>
                                                                                          </OutArgument>
                                                                                        </Assign.To>
                                                                                        <Assign.Value>
                                                                                          <InArgument x:TypeArguments="x:String">Cancelled</InArgument>
                                                                                        </Assign.Value>
                                                                                      </Assign>
                                                                                    </Sequence>
                                                                                  </If.Else>
                                                                                </If>
                                                                                <Assign>
                                                                                  <Assign.To>
                                                                                    <OutArgument x:TypeArguments="x:String">
                                                                                      <mca:CSharpReference x:TypeArguments="x:String">ApproveStatus</mca:CSharpReference>
                                                                                    </OutArgument>
                                                                                  </Assign.To>
                                                                                  <Assign.Value>
                                                                                    <InArgument x:TypeArguments="x:String">Approved</InArgument>
                                                                                  </Assign.Value>
                                                                                </Assign>
                                                                              </Sequence>
                                                                            </If.Then>
                                                                            <If.Else>
                                                                              <Sequence>
                                                                                <Assign>
                                                                                  <Assign.To>
                                                                                    <OutArgument x:TypeArguments="x:String">
                                                                                      <mca:CSharpReference x:TypeArguments="x:String">setStatusRequest</mca:CSharpReference>
                                                                                    </OutArgument>
                                                                                  </Assign.To>
                                                                                  <Assign.Value>
                                                                                    <InArgument x:TypeArguments="x:String">Rejected</InArgument>
                                                                                  </Assign.Value>
                                                                                </Assign>
                                                                                <Assign>
                                                                                  <Assign.To>
                                                                                    <OutArgument x:TypeArguments="x:String">
                                                                                      <mca:CSharpReference x:TypeArguments="x:String">ApproveStatus</mca:CSharpReference>
                                                                                    </OutArgument>
                                                                                  </Assign.To>
                                                                                  <Assign.Value>
                                                                                    <InArgument x:TypeArguments="x:String">Rejected</InArgument>
                                                                                  </Assign.Value>
                                                                                </Assign>
                                                                              </Sequence>
                                                                            </If.Else>
                                                                          </If>
                                                                        </Sequence>
                                                                      </Sequence>
                                                                    </If.Then>
                                                                    <If.Else>
                                                                      <Sequence>
                                                                        <p:WriteToHistory Message="No Manager" />
                                                                        <If>
                                                                          <If.Condition>
                                                                            <InArgument x:TypeArguments="x:Boolean">
                                                                              <mca:CSharpValue x:TypeArguments="x:Boolean">RequestType.ToLower().Equals("new")</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </If.Condition>
                                                                          <If.Then>
                                                                            <Sequence>
                                                                              <Assign>
                                                                                <Assign.To>
                                                                                  <OutArgument x:TypeArguments="x:String">
                                                                                    <mca:CSharpReference x:TypeArguments="x:String">setStatusRequest</mca:CSharpReference>
                                                                                  </OutArgument>
                                                                                </Assign.To>
                                                                                <Assign.Value>
                                                                                  <InArgument x:TypeArguments="x:String">Approved</InArgument>
                                                                                </Assign.Value>
                                                                              </Assign>
                                                                            </Sequence>
                                                                          </If.Then>
                                                                          <If.Else>
                                                                            <Sequence>
                                                                              <Assign>
                                                                                <Assign.To>
                                                                                  <OutArgument x:TypeArguments="x:String">
                                                                                    <mca:CSharpReference x:TypeArguments="x:String">setStatusRequest</mca:CSharpReference>
                                                                                  </OutArgument>
                                                                                </Assign.To>
                                                                                <Assign.Value>
                                                                                  <InArgument x:TypeArguments="x:String">Cancelled</InArgument>
                                                                                </Assign.Value>
                                                                              </Assign>
                                                                            </Sequence>
                                                                          </If.Else>
                                                                        </If>
                                                                        <Assign>
                                                                          <Assign.To>
                                                                            <OutArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpReference x:TypeArguments="x:String">ApproveStatus</mca:CSharpReference>
                                                                            </OutArgument>
                                                                          </Assign.To>
                                                                          <Assign.Value>
                                                                            <InArgument x:TypeArguments="x:String">Approved</InArgument>
                                                                          </Assign.Value>
                                                                        </Assign>
                                                                        <Assign>
                                                                          <Assign.To>
                                                                            <OutArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpReference x:TypeArguments="x:String">ExtraOwnApprove</mca:CSharpReference>
                                                                            </OutArgument>
                                                                          </Assign.To>
                                                                          <Assign.Value>
                                                                            <InArgument x:TypeArguments="x:String">(อนุมัติด้วยตนเอง)</InArgument>
                                                                          </Assign.Value>
                                                                        </Assign>
                                                                      </Sequence>
                                                                    </If.Else>
                                                                  </If>
                                                                  <p:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}">
                                                                    <p:Email.Body>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">BodyRequesterEmail+ApproveStatus+ " การขออนุมัติของท่าน " + "&lt;a href='" + CurrentUrl + "?SPHostUrl=" + CurrentHostUrl + "&amp;SPAppWebUrl=" + CurrentAppUrl + "&amp;CaseView=1&amp;CurItemId=" + CurrentItemID + "'&gt;รายละเอียด&lt;/a&gt;&lt;br/&gt;"</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </p:Email.Body>
                                                                    <p:Email.Subject>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">TitleRequesterEmail+ExtraOwnApprove</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </p:Email.Subject>
                                                                    <p:Email.To>
                                                                      <InArgument x:TypeArguments="sco:Collection(x:String)">
                                                                        <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">EmailToRequester</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </p:Email.To>
                                                                  </p:Email>
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:Boolean">
                                                                        <mca:CSharpReference x:TypeArguments="x:Boolean">iscompleteParallel</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                </Sequence>
                                                              </p:AppOnlySequence.Body>
                                                            </p:AppOnlySequence>
                                                          </TryCatch.Try>
                                                          <TryCatch.Catches>
                                                            <Catch x:TypeArguments="s:Exception">
                                                              <ActivityAction x:TypeArguments="s:Exception">
                                                                <ActivityAction.Argument>
                                                                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                                                </ActivityAction.Argument>
                                                                <Sequence>
                                                                  <p:WriteToHistory>
                                                                    <p:WriteToHistory.Message>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">"Error In Send Task :"+exception.ToString().Length</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </p:WriteToHistory.Message>
                                                                  </p:WriteToHistory>
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpReference x:TypeArguments="x:Int32">errorindex</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpReference x:TypeArguments="x:Int32">errormax</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:Int32">240</InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpReference x:TypeArguments="x:Int32">errorlen</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpValue x:TypeArguments="x:Int32">exception.ToString().Length</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                  <While>
                                                                    <While.Condition>
                                                                      <mca:CSharpValue x:TypeArguments="x:Boolean">errorindex &lt; exception.ToString().Length;</mca:CSharpValue>
                                                                    </While.Condition>
                                                                    <Sequence>
                                                                      <If>
                                                                        <If.Condition>
                                                                          <InArgument x:TypeArguments="x:Boolean">
                                                                            <mca:CSharpValue x:TypeArguments="x:Boolean">(errorlen-errorindex) &gt; errormax</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </If.Condition>
                                                                        <If.Then>
                                                                          <p:WriteToHistory>
                                                                            <p:WriteToHistory.Message>
                                                                              <InArgument x:TypeArguments="x:String">
                                                                                <mca:CSharpValue x:TypeArguments="x:String">exception.ToString().Substring(errorindex,errormax)</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </p:WriteToHistory.Message>
                                                                          </p:WriteToHistory>
                                                                        </If.Then>
                                                                        <If.Else>
                                                                          <p:WriteToHistory>
                                                                            <p:WriteToHistory.Message>
                                                                              <InArgument x:TypeArguments="x:String">
                                                                                <mca:CSharpValue x:TypeArguments="x:String">exception.ToString().Substring(errorindex,(errorlen-errorindex))</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </p:WriteToHistory.Message>
                                                                          </p:WriteToHistory>
                                                                        </If.Else>
                                                                      </If>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="x:Int32">
                                                                            <mca:CSharpReference x:TypeArguments="x:Int32">errorindex</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="x:Int32">
                                                                            <mca:CSharpValue x:TypeArguments="x:Int32">errorindex+errormax</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                    </Sequence>
                                                                  </While>
                                                                  <p1:SetUserStatus Description="Terminate" />
                                                                  <TerminateWorkflow Reason="Terminate because error" />
                                                                </Sequence>
                                                              </ActivityAction>
                                                            </Catch>
                                                          </TryCatch.Catches>
                                                        </TryCatch>
                                                        <p:AppOnlySequence>
                                                          <p:AppOnlySequence.Body>
                                                            <Sequence>
                                                              <p:WaitForFieldChange EventPayload="{x:Null}" ItemGuid="{x:Null}" FieldName="CancelWorkflow" FieldValue="true">
                                                                <p:WaitForFieldChange.ItemId>
                                                                  <InArgument x:TypeArguments="x:Int32">
                                                                    <p1:ExpressionContainerValue x:TypeArguments="x:Int32">
                                                                      <p:GetCurrentItemId />
                                                                    </p1:ExpressionContainerValue>
                                                                  </InArgument>
                                                                </p:WaitForFieldChange.ItemId>
                                                                <p:WaitForFieldChange.ListId>
                                                                  <InArgument x:TypeArguments="s:Guid">
                                                                    <p1:ExpressionContainerValue x:TypeArguments="s:Guid">
                                                                      <p:GetCurrentListId />
                                                                    </p1:ExpressionContainerValue>
                                                                  </InArgument>
                                                                </p:WaitForFieldChange.ListId>
                                                              </p:WaitForFieldChange>
                                                              <p:WriteToHistory Message="Starting Teminate" />
                                                              <Assign>
                                                                <Assign.To>
                                                                  <OutArgument x:TypeArguments="x:Int32">
                                                                    <mca:CSharpReference x:TypeArguments="x:Int32">iscancelstate</mca:CSharpReference>
                                                                  </OutArgument>
                                                                </Assign.To>
                                                                <Assign.Value>
                                                                  <InArgument x:TypeArguments="x:Int32">1</InArgument>
                                                                </Assign.Value>
                                                              </Assign>
                                                              <Assign>
                                                                <Assign.To>
                                                                  <OutArgument x:TypeArguments="x:Boolean">
                                                                    <mca:CSharpReference x:TypeArguments="x:Boolean">iscompleteParallel</mca:CSharpReference>
                                                                  </OutArgument>
                                                                </Assign.To>
                                                                <Assign.Value>
                                                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                                                </Assign.Value>
                                                              </Assign>
                                                            </Sequence>
                                                          </p:AppOnlySequence.Body>
                                                        </p:AppOnlySequence>
                                                      </Parallel>
                                                    </Sequence>
                                                  </State.Entry>
                                                  <State.Transitions>
                                                    <Transition DisplayName="T4">
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RequestType.ToLower().Equals("new") &amp;&amp; iscancelstate == 0</mca:CSharpValue>
                                                      </Transition.Condition>
                                                      <Transition.To>
                                                        <State x:Name="__ReferenceID11" DisplayName="Set Status (New)">
                                                          <State.Entry>
                                                            <Sequence>
                                                              <p:AppOnlySequence>
                                                                <p:AppOnlySequence.Body>
                                                                  <Sequence>
                                                                    <p:WriteToHistory>
                                                                      <p:WriteToHistory.Message>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <mca:CSharpValue x:TypeArguments="x:String">"Set Status to : "+setStatusRequest</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </p:WriteToHistory.Message>
                                                                    </p:WriteToHistory>
                                                                    <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                                                      <p:UpdateListItem.ItemId>
                                                                        <InArgument x:TypeArguments="x:Int32">
                                                                          <mca:CSharpValue x:TypeArguments="x:Int32">CurrentItemID</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </p:UpdateListItem.ItemId>
                                                                      <p:UpdateListItem.ListId>
                                                                        <InArgument x:TypeArguments="s:Guid">
                                                                          <mca:CSharpValue x:TypeArguments="s:Guid">CurrentListGUID</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </p:UpdateListItem.ListId>
                                                                      <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                        <InArgument x:TypeArguments="p1:DynamicValue">
                                                                          <p1:SetDynamicValueProperties>
                                                                            <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                                                              <InArgument x:TypeArguments="x:String" x:Key="LeaveStatus">
                                                                                <mca:CSharpValue x:TypeArguments="x:String">setStatusRequest</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </scg:Dictionary>
                                                                          </p1:SetDynamicValueProperties>
                                                                        </InArgument>
                                                                      </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                    </p:UpdateListItem>
                                                                    <p1:SetUserStatus DisplayName="Set In Progress">
                                                                      <p1:SetUserStatus.Description>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <mca:CSharpValue x:TypeArguments="x:String">setStatusRequest</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </p1:SetUserStatus.Description>
                                                                    </p1:SetUserStatus>
                                                                  </Sequence>
                                                                </p:AppOnlySequence.Body>
                                                              </p:AppOnlySequence>
                                                            </Sequence>
                                                          </State.Entry>
                                                          <State.Transitions>
                                                            <Transition DisplayName="T13">
                                                              <Transition.To>
                                                                <State x:Name="__ReferenceID0" DisplayName="HR Review">
                                                                  <State.Entry>
                                                                    <Sequence DisplayName="HR Review">
                                                                      <If>
                                                                        <If.Condition>
                                                                          <InArgument x:TypeArguments="x:Boolean">
                                                                            <mca:CSharpValue x:TypeArguments="x:Boolean">listHrApprove.Count &gt; 0 &amp;&amp; ApproveStatus.Equals("Approved")</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </If.Condition>
                                                                        <If.Then>
                                                                          <Sequence>
                                                                            <Sequence.Variables>
                                                                              <Variable x:TypeArguments="x:Int32" Name="outcom_hr" />
                                                                            </Sequence.Variables>
                                                                            <p:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}">
                                                                              <p:Email.Body>
                                                                                <InArgument x:TypeArguments="x:String">
                                                                                  <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">BodyHrEmail + ApproveStatus + "  " + "&lt;a href='" + CurrentUrl + "?SPHostUrl=" + CurrentHostUrl + "&amp;SPAppWebUrl=" + CurrentAppUrl + "&amp;CaseView=2&amp;CurItemId=" + CurrentItemID + "'&gt;รายละเอียด&lt;/a&gt;&lt;br/&gt;"</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </p:Email.Body>
                                                                              <p:Email.Subject>
                                                                                <InArgument x:TypeArguments="x:String">
                                                                                  <mca:CSharpValue x:TypeArguments="x:String">TitleHREmail</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </p:Email.Subject>
                                                                              <p:Email.To>
                                                                                <InArgument x:TypeArguments="sco:Collection(x:String)">
                                                                                  <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">listHrApprove</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </p:Email.To>
                                                                            </p:Email>
                                                                            <p:WriteToHistory Message="Hr Reviewed" />
                                                                          </Sequence>
                                                                        </If.Then>
                                                                        <If.Else>
                                                                          <p:WriteToHistory Message="No Hr" />
                                                                        </If.Else>
                                                                      </If>
                                                                    </Sequence>
                                                                  </State.Entry>
                                                                  <State.Transitions>
                                                                    <Transition DisplayName="T8">
                                                                      <Transition.To>
                                                                        <State x:Name="__ReferenceID1" DisplayName="FinalState" IsFinal="True" />
                                                                      </Transition.To>
                                                                    </Transition>
                                                                  </State.Transitions>
                                                                </State>
                                                              </Transition.To>
                                                            </Transition>
                                                          </State.Transitions>
                                                        </State>
                                                      </Transition.To>
                                                    </Transition>
                                                    <Transition DisplayName="T12">
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RequestType.ToLower().Equals("cancel") &amp;&amp; iscancelstate == 0</mca:CSharpValue>
                                                      </Transition.Condition>
                                                      <Transition.To>
                                                        <State x:Name="__ReferenceID10" DisplayName="Set Status (Cancel)">
                                                          <State.Entry>
                                                            <Sequence>
                                                              <p:AppOnlySequence>
                                                                <p:AppOnlySequence.Body>
                                                                  <Sequence>
                                                                    <p:WriteToHistory>
                                                                      <p:WriteToHistory.Message>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <mca:CSharpValue x:TypeArguments="x:String">"Set Status to : "+setStatusRequest</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </p:WriteToHistory.Message>
                                                                    </p:WriteToHistory>
                                                                    <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                                                      <p:UpdateListItem.ItemId>
                                                                        <InArgument x:TypeArguments="x:Int32">
                                                                          <mca:CSharpValue x:TypeArguments="x:Int32">CurrentItemID</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </p:UpdateListItem.ItemId>
                                                                      <p:UpdateListItem.ListId>
                                                                        <InArgument x:TypeArguments="s:Guid">
                                                                          <mca:CSharpValue x:TypeArguments="s:Guid">CurrentListGUID</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </p:UpdateListItem.ListId>
                                                                      <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                        <InArgument x:TypeArguments="p1:DynamicValue">
                                                                          <p1:SetDynamicValueProperties>
                                                                            <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                                                              <InArgument x:TypeArguments="x:String" x:Key="CancelLeaveStatus">
                                                                                <mca:CSharpValue x:TypeArguments="x:String">setStatusRequest</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </scg:Dictionary>
                                                                          </p1:SetDynamicValueProperties>
                                                                        </InArgument>
                                                                      </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                    </p:UpdateListItem>
                                                                    <p1:SetUserStatus DisplayName="Set In Progress">
                                                                      <p1:SetUserStatus.Description>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <mca:CSharpValue x:TypeArguments="x:String">setStatusRequest</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </p1:SetUserStatus.Description>
                                                                    </p1:SetUserStatus>
                                                                  </Sequence>
                                                                </p:AppOnlySequence.Body>
                                                              </p:AppOnlySequence>
                                                            </Sequence>
                                                          </State.Entry>
                                                          <State.Transitions>
                                                            <Transition DisplayName="T14" To="{x:Reference __ReferenceID0}" />
                                                          </State.Transitions>
                                                        </State>
                                                      </Transition.To>
                                                    </Transition>
                                                    <Transition DisplayName="T15">
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">iscancelstate == 1</mca:CSharpValue>
                                                      </Transition.Condition>
                                                      <Transition.To>
                                                        <State x:Name="__ReferenceID12" DisplayName="Set Status (Teminate)">
                                                          <State.Entry>
                                                            <Sequence>
                                                              <p:AppOnlySequence>
                                                                <p:AppOnlySequence.Body>
                                                                  <Sequence DisplayName="Set Status (Teminate">
                                                                    <Assign>
                                                                      <Assign.To>
                                                                        <OutArgument x:TypeArguments="x:String">
                                                                          <mca:CSharpReference x:TypeArguments="x:String">setStatusRequest</mca:CSharpReference>
                                                                        </OutArgument>
                                                                      </Assign.To>
                                                                      <Assign.Value>
                                                                        <InArgument x:TypeArguments="x:String">Cancelled</InArgument>
                                                                      </Assign.Value>
                                                                    </Assign>
                                                                    <Sequence>
                                                                      <p:WriteToHistory>
                                                                        <p:WriteToHistory.Message>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <mca:CSharpValue x:TypeArguments="x:String">"Set Status to : "+setStatusRequest</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </p:WriteToHistory.Message>
                                                                      </p:WriteToHistory>
                                                                      <If>
                                                                        <If.Condition>
                                                                          <InArgument x:TypeArguments="x:Boolean">
                                                                            <mca:CSharpValue x:TypeArguments="x:Boolean">RequestType.ToLower().Equals("new")</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </If.Condition>
                                                                        <If.Then>
                                                                          <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                                                            <p:UpdateListItem.ItemId>
                                                                              <InArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpValue x:TypeArguments="x:Int32">CurrentItemID</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </p:UpdateListItem.ItemId>
                                                                            <p:UpdateListItem.ListId>
                                                                              <InArgument x:TypeArguments="s:Guid">
                                                                                <mca:CSharpValue x:TypeArguments="s:Guid">CurrentListGUID</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </p:UpdateListItem.ListId>
                                                                            <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                              <InArgument x:TypeArguments="p1:DynamicValue">
                                                                                <p1:SetDynamicValueProperties>
                                                                                  <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="LeaveStatus">
                                                                                      <mca:CSharpValue x:TypeArguments="x:String">setStatusRequest</mca:CSharpValue>
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="CancelLeaveStatus">
                                                                                      <Literal x:TypeArguments="x:String" Value="" />
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="CancelWorkflow">
                                                                                      <Literal x:TypeArguments="x:String" Value="" />
                                                                                    </InArgument>
                                                                                  </scg:Dictionary>
                                                                                </p1:SetDynamicValueProperties>
                                                                              </InArgument>
                                                                            </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                          </p:UpdateListItem>
                                                                        </If.Then>
                                                                        <If.Else>
                                                                          <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                                                            <p:UpdateListItem.ItemId>
                                                                              <InArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpValue x:TypeArguments="x:Int32">CurrentItemID</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </p:UpdateListItem.ItemId>
                                                                            <p:UpdateListItem.ListId>
                                                                              <InArgument x:TypeArguments="s:Guid">
                                                                                <mca:CSharpValue x:TypeArguments="s:Guid">CurrentListGUID</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </p:UpdateListItem.ListId>
                                                                            <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                              <InArgument x:TypeArguments="p1:DynamicValue">
                                                                                <p1:SetDynamicValueProperties>
                                                                                  <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="CancelLeaveStatus">
                                                                                      <Literal x:TypeArguments="x:String" Value="" />
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="CancelWorkflow">
                                                                                      <Literal x:TypeArguments="x:String" Value="" />
                                                                                    </InArgument>
                                                                                  </scg:Dictionary>
                                                                                </p1:SetDynamicValueProperties>
                                                                              </InArgument>
                                                                            </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                          </p:UpdateListItem>
                                                                        </If.Else>
                                                                      </If>
                                                                      <p1:SetUserStatus DisplayName="Set In Cancelled">
                                                                        <p1:SetUserStatus.Description>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <mca:CSharpValue x:TypeArguments="x:String">setStatusRequest</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </p1:SetUserStatus.Description>
                                                                      </p1:SetUserStatus>
                                                                      <TerminateWorkflow Reason="Cancel by Requester" />
                                                                    </Sequence>
                                                                  </Sequence>
                                                                </p:AppOnlySequence.Body>
                                                              </p:AppOnlySequence>
                                                            </Sequence>
                                                          </State.Entry>
                                                          <State.Transitions>
                                                            <Transition DisplayName="T16" To="{x:Reference __ReferenceID1}" />
                                                          </State.Transitions>
                                                        </State>
                                                      </Transition.To>
                                                    </Transition>
                                                  </State.Transitions>
                                                  <State.Variables>
                                                    <Variable x:TypeArguments="sco:Collection(x:String)" Name="EmailToRequester" />
                                                    <Variable x:TypeArguments="x:String" Name="ExtraOwnApprove" />
                                                    <Variable x:TypeArguments="x:Int32" Name="iscancelstate" />
                                                    <Variable x:TypeArguments="x:Boolean" Name="iscompleteParallel" />
                                                  </State.Variables>
                                                </State>
                                              </Transition.To>
                                            </Transition>
                                          </State.Transitions>
                                        </State>
                                      </Transition.To>
                                    </Transition>
                                    <Transition DisplayName="T9">
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RequestType.ToLower().Equals("cancel")</mca:CSharpValue>
                                      </Transition.Condition>
                                      <Transition.To>
                                        <State x:Name="__ReferenceID9" DisplayName="Manager Title Body (Cancel)">
                                          <State.Entry>
                                            <Sequence>
                                              <Sequence DisplayName="Manager">
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">TitleManagerEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"แจ้งการขออนุมัติยกเลิกการลาของ " + Title</mca:CSharpValue>
                                                    </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">BodyManagerEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"กรุณาพิจารณา ยกเลิกการลา " + LeaveType + " ของ " + Title</mca:CSharpValue>
                                                    </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                              </Sequence>
                                              <Sequence DisplayName="Requester">
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">TitleRequesterEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">แจ้งผลการขออนุมัติยกเลิกการลา</InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">BodyRequesterEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String" xml:space="preserve">การขอยกเลิกการลา ผู้อนุมัติได้พิจารณา </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                              </Sequence>
                                              <Sequence DisplayName="HR">
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">TitleHREmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Review : แจ้งผลการขออนุมัติยกเลิกการลาของ " + Title</mca:CSharpValue>
                                                    </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">
                                                      <mca:CSharpReference x:TypeArguments="x:String">BodyHrEmail</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"ตามที่ " + Title + "ได้ขออนุมัติยกเลิกการลา " + LeaveType + " โดยมีผลการพิจารณา คือ "</mca:CSharpValue>
                                                    </InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                              </Sequence>
                                            </Sequence>
                                          </State.Entry>
                                          <State.Transitions>
                                            <Transition DisplayName="T10" To="{x:Reference __ReferenceID2}" />
                                          </State.Transitions>
                                        </State>
                                      </Transition.To>
                                    </Transition>
                                  </State.Transitions>
                                </State>
                              </Transition.To>
                            </Transition>
                          </State.Transitions>
                        </State>
                      </Transition.To>
                    </Transition>
                    <Transition DisplayName="T6">
                      <Transition.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">RequestType.ToLower().Equals("cancel")</mca:CSharpValue>
                      </Transition.Condition>
                      <Transition.To>
                        <State x:Name="__ReferenceID7" DisplayName="Set Status to Inprogress (Cancel)">
                          <State.Entry>
                            <Sequence>
                              <p:AppOnlySequence>
                                <p:AppOnlySequence.Body>
                                  <Sequence>
                                    <p:WriteToHistory Message="Request : Cancel" />
                                    <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                      <p:UpdateListItem.ItemId>
                                        <InArgument x:TypeArguments="x:Int32">
                                          <mca:CSharpValue x:TypeArguments="x:Int32">CurrentItemID</mca:CSharpValue>
                                        </InArgument>
                                      </p:UpdateListItem.ItemId>
                                      <p:UpdateListItem.ListId>
                                        <InArgument x:TypeArguments="s:Guid">
                                          <mca:CSharpValue x:TypeArguments="s:Guid">CurrentListGUID</mca:CSharpValue>
                                        </InArgument>
                                      </p:UpdateListItem.ListId>
                                      <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                        <InArgument x:TypeArguments="p1:DynamicValue">
                                          <p1:SetDynamicValueProperties>
                                            <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                              <InArgument x:TypeArguments="x:String" x:Key="CancelLeaveStatus">In Progress</InArgument>
                                            </scg:Dictionary>
                                          </p1:SetDynamicValueProperties>
                                        </InArgument>
                                      </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                    </p:UpdateListItem>
                                    <p1:SetUserStatus Description="In Progress" DisplayName="Set In Progress" />
                                  </Sequence>
                                </p:AppOnlySequence.Body>
                              </p:AppOnlySequence>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">
                                    <mca:CSharpReference x:TypeArguments="x:String">ApproveStatus</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">In Progress</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </State.Entry>
                          <State.Transitions>
                            <Transition DisplayName="T7" To="{x:Reference __ReferenceID3}" />
                          </State.Transitions>
                        </State>
                      </Transition.To>
                    </Transition>
                  </State.Transitions>
                </State>
              </Transition.To>
            </Transition>
          </State.Transitions>
        </State>
      </StateMachine.InitialState>
      <x:Reference>__ReferenceID4</x:Reference>
      <x:Reference>__ReferenceID2</x:Reference>
      <x:Reference>__ReferenceID3</x:Reference>
      <x:Reference>__ReferenceID5</x:Reference>
      <x:Reference>__ReferenceID1</x:Reference>
      <x:Reference>__ReferenceID6</x:Reference>
      <x:Reference>__ReferenceID7</x:Reference>
      <x:Reference>__ReferenceID0</x:Reference>
      <x:Reference>__ReferenceID8</x:Reference>
      <x:Reference>__ReferenceID9</x:Reference>
      <x:Reference>__ReferenceID10</x:Reference>
      <x:Reference>__ReferenceID11</x:Reference>
      <x:Reference>__ReferenceID12</x:Reference>
      <StateMachine.Variables>
        <Variable x:TypeArguments="x:Int32" Name="CurrentItemID" />
        <Variable x:TypeArguments="x:String" Name="CurrentListID" />
        <Variable x:TypeArguments="s:Guid" Name="CurrentListGUID" />
        <Variable x:TypeArguments="x:String" Name="Title" />
        <Variable x:TypeArguments="x:String" Name="LeaveType" />
        <Variable x:TypeArguments="x:Double" Name="NumberOfDay" />
        <Variable x:TypeArguments="x:String" Name="LeaveStatus" />
        <Variable x:TypeArguments="x:String" Name="OfficerManager" />
        <Variable x:TypeArguments="sco:Collection(x:String)" Name="listHrApprove" />
        <Variable x:TypeArguments="x:String" Name="CurrentSiteUrl" />
        <Variable x:TypeArguments="x:String" Name="ApproveStatus" />
        <Variable x:TypeArguments="p1:DynamicValue" Name="dynamichr" />
        <Variable x:TypeArguments="x:String" Name="RequestType" />
        <Variable x:TypeArguments="x:String" Name="CancelLeaveStatus" />
        <Variable x:TypeArguments="x:String" Name="TitleManagerEmail" />
        <Variable x:TypeArguments="x:String" Name="BodyManagerEmail" />
        <Variable x:TypeArguments="x:String" Name="setStatusRequest" />
        <Variable x:TypeArguments="x:String" Name="RequesterId" />
        <Variable x:TypeArguments="x:String" Name="TitleRequesterEmail" />
        <Variable x:TypeArguments="x:String" Name="BodyRequesterEmail" />
        <Variable x:TypeArguments="x:String" Name="TitleHREmail" />
        <Variable x:TypeArguments="x:String" Name="BodyHrEmail" />
        <Variable x:TypeArguments="x:String" Name="CurrentAppUrl" />
        <Variable x:TypeArguments="x:String" Name="CurrentHostUrl" />
        <Variable x:TypeArguments="x:String" Name="CurrentUrl" />
      </StateMachine.Variables>
      <sads:DebugSymbol.Symbol>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</sads:DebugSymbol.Symbol>
    </StateMachine>
  </tlwl:Workflow.Implementation>
</tlwl:Workflow>