<Activity mc:Ignorable="sads" x:Class="tora_asia.leaverequest.Workflows.LeaveReqeustWF.Workflow"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:made="clr-namespace:Microsoft.Activities.Design.ExpressionTranslation;assembly=Microsoft.Activities.Design"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:p="wf://workflow.windows.net/$Activities"
 xmlns:p1="http://schemas.microsoft.com/workflow/2012/07/xaml/activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <StateMachine sads:DebugSymbol.Symbol="9xB1wI52DniSQnlqfK3p90h3ekU6XFdvcmtTcGFjZVxUT1JBLUFTSUFcTGVhdmVSZXF1ZXN0XFJlcG9cbGVhdmVyZXF1ZXN0LWRlbW9cdG9yYS1hc2lhLmxlYXZlcmVxdWVzdFxXb3JrZmxvd3NcTGVhdmVSZXFldXN0V0ZWMVxXb3JrZmxvdy54YW1snQEuA7QLEgIBATILNh8DAdEEOQtxHwMBtwTbAzO5Bz4DAdwC5AEj/wI3AwGLArUBG90BJgMB8AF4E6sBHgMB0wHUChv8CiYDAbgB9gdDnAhOAwGfAYkDK9QDNgIBeu8JK7oKNgIBVbMIO98IRgIBQcMHO+8HRgIBLe4IO9IJRgIBBTQPNHADAdIEOw9vGgMBuATcAzXlAz4DAbAE5gM17wM+AwGsBPADNbgHQAMB3QLmASf9AjIDAYwCtgEd0gExAwH1AdMBHdwBJgMB8QF8FYwBKgMB5AGNARWhAS0DAdkBogEVqgEoAwHUAdUKHfEKMQMBvQHyCh37CiYDAbkB9wdFmwhKAwGgAYoDLaMDOAMBkAGkAy25AzgDAYcBugMt0wM4AgF78AktiQo4AgFrigotnwo4AgFioAotuQo4AgFWtAg93ghRAgFCxAc97gdRAgEu7wg90QlRAgEGPxFFMwMBzQRGEUwmAwHKBE0RUzMDAcYEVBFaMwMBwgRbEWYaAwG9BGcRbiQDAbkE9AM3jAdCAwHxAo0HN7cHSwMB4ALsASnsAZABAwHNAu0BKf0BPgMBxgL+ASmeAkEDAbMCnwIpvAIuAwGnAr0CKcUCPAMBogLGAin8Ai4DAY0CuAEh0AEsAwH2AdcKIe8KLAMBvgH+B0mWCFQDAaYBmQhJmQihAQMBpAGLAy+WAzgDAZcBlwMvogM4AwGRAaUDL64DOAMBjAGvAy+4AzgDAYgBuwMvxgM4AwGCAccDL9IDOAIBfPEJL/wJOAIBcv0JL4gKOAIBbIsKL5QKOAIBZ5UKL54KOAIBY6EKL6wKOAIBXa0KL7gKOAIBV7YIQdwITAIBQ8YHQewHTAIBL/EIQc8JTAIBB/sDO6oGTwMBogOyBj+IB0oDAfICjwc7tQdGAwHhAqYCLboCOAMBqgLNAi36AjgDAZACuQEjuQGDAQMBgAK6ASPOATYDAfkBzwEjzwGhAQMB9wHYCiPYCoYBAwHIAdkKI+0KNgMBwQHuCiPuCqEBAwG/AYIIS5QIVQMBqQGVCEuVCKkBAwGnAbcIQ70IVgIBT74IQ9QIVgIBR9UIQ9sIVgIBRMcHQ80HVgIBO84HQ+QHVgIBM+UHQ+sHVgIBMPIIQ/sITAIBJvwIQ84JTgIBCP0DP6gGSgMBowOzBkG5BlQDAZ8DugZBwwZKAwGbA8QGQc0GSgMBlwPOBkHZBkoDAZID2gZBhQdJAwH3AoYHQYYHoAEDAfUChwdBhwetAQMB8wKQBz2fB1QDAewCoAc9oAehAQMB6gKhBz2qB0YDAeYCqwc9tAdGAwHiAqcCL7ICRwMBrgKzAi+5AkIDAasC0wIv3AJGAwGdAt0CL+0CTAMBlgLuAi/5AjgDAZECxwEpywFIAwH+AeYKKeoKSAMBxgHLCEnRCGgCAUzbB0nhB2gCATj9CEWDCVgCASOECUXFCUoCAQ7GCUXMCVgCAQvNCUXNCa0BAgEJ/gNBiARUAwGlBIkEQZQEVgMBoASVBEGKBkYDAbUDiwZBnQZLAwGoA54GQacGSgMBpAPeBkOEB04DAfsCiwlJpwlcAgEZqglJwwlcAgERnARFzAVQAwHQA88FRYgGUAMBuAPfBkX3BkoDAYID+AZFgwdOAwH8ApgJT6QJbgIBHrcJT8AJbgIBFqEER6EEqQEDAZ4EogRHqARaAwGbBKkER68EWgMBmASwBEfyBFYDAfQD8wRH+QRaAwHxA/oER8sFUgMB0QPQBUfQBaQBAwHOA9EFR/MFTAMBwQP0BUf9BVADAb0D/gVHhwZQAwG5A+YGSewGXAMBjQPvBkn1BlwDAYcD+wRJygVOAwHSA9gFS+MFVgMByQPmBUvxBVYDAcQDggVNsAVYAwHeA7MFTcgFWAMB1QPZBU3iBVYDAcoD5wVN8AVWAwHFA4MFT6UFVAMB4wOmBU+vBVgDAd8DtAVPvQVYAwHaA74FT8cFWAMB1gOKBVOVBV4DAewDmAVTowVeAwHnA4sFVZQFXgMB7QOZBVWiBV4DAegD">
    <StateMachine.InitialState>
      <State x:Name="__ReferenceID41" DisplayName="Get List Info">
        <State.Entry>
          <p:AppOnlySequence>
            <p:AppOnlySequence.Body>
              <p:WriteToHistory Message="Workflow Start" />
            </p:AppOnlySequence.Body>
          </p:AppOnlySequence>
        </State.Entry>
        <State.Exit>
          <p:AppOnlySequence>
            <p:AppOnlySequence.Body>
              <Sequence>
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:String" x:Name="__ReferenceID0" Name="currentListName" />
                </Sequence.Variables>
                <p:LookupWorkflowContextProperty DisplayName="Get Current Site Url" PropertyName="CurrentWebUrl">
                  <p:LookupWorkflowContextProperty.Result>
                    <OutArgument x:TypeArguments="x:String">
                      <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="CurrentSiteUrl">
                        <p1:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="CurrentSiteUrl">
                            <VariableReference x:TypeArguments="x:String">
                              <VariableReference.Variable>
                                <Variable x:TypeArguments="x:String" x:Name="__ReferenceID51" Name="CurrentSiteUrl" />
                              </VariableReference.Variable>
                            </VariableReference>
                          </InOutArgument>
                        </p1:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="CurrentSiteUrl" />
                      </p1:ExpressionContainerReference>
                    </OutArgument>
                  </p:LookupWorkflowContextProperty.Result>
                </p:LookupWorkflowContextProperty>
                <p:GetCurrentItemId DisplayName="Get Current Item ID">
                  <p:GetCurrentItemId.Result>
                    <OutArgument x:TypeArguments="x:Int32">
                      <p1:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="CurrentItemID">
                        <p1:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                            <VariableReference x:TypeArguments="x:Int32">
                              <VariableReference.Variable>
                                <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID2" Name="CurrentItemID" />
                              </VariableReference.Variable>
                            </VariableReference>
                          </InOutArgument>
                        </p1:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                      </p1:ExpressionContainerReference>
                    </OutArgument>
                  </p:GetCurrentItemId.Result>
                </p:GetCurrentItemId>
                <p:LookupWorkflowContextProperty DisplayName="Get Current List ID" PropertyName="ListId">
                  <p:LookupWorkflowContextProperty.Result>
                    <OutArgument x:TypeArguments="x:String">
                      <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="CurrentListID">
                        <p1:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="CurrentListID">
                            <VariableReference x:TypeArguments="x:String">
                              <VariableReference.Variable>
                                <Variable x:TypeArguments="x:String" x:Name="__ReferenceID1" Name="CurrentListID" />
                              </VariableReference.Variable>
                            </VariableReference>
                          </InOutArgument>
                        </p1:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="CurrentListID" />
                      </p1:ExpressionContainerReference>
                    </OutArgument>
                  </p:LookupWorkflowContextProperty.Result>
                </p:LookupWorkflowContextProperty>
                <p:LookupWorkflowContextProperty DisplayName="Get Current List Name" PropertyName="ListName">
                  <p:LookupWorkflowContextProperty.Result>
                    <OutArgument x:TypeArguments="x:String">
                      <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="currentListName">
                        <p1:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="currentListName">
                            <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID0}" />
                          </InOutArgument>
                        </p1:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="currentListName" />
                      </p1:ExpressionContainerReference>
                    </OutArgument>
                  </p:LookupWorkflowContextProperty.Result>
                </p:LookupWorkflowContextProperty>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="s:Guid">
                      <p1:ExpressionContainerReference x:TypeArguments="s:Guid" DisplayName="CurrentListGUID">
                        <p1:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="s:Guid" x:Key="CurrentListGUID">
                            <VariableReference x:TypeArguments="s:Guid">
                              <VariableReference.Variable>
                                <Variable x:TypeArguments="s:Guid" x:Name="__ReferenceID3" Name="CurrentListGUID" />
                              </VariableReference.Variable>
                            </VariableReference>
                          </InOutArgument>
                        </p1:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="s:Guid" ArgumentName="CurrentListGUID" />
                      </p1:ExpressionContainerReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="s:Guid">
                      <p1:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="new Guid(CurrentListID)">
                        <p1:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="CurrentListID">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID1}" />
                          </InArgument>
                        </p1:ExpressionContainerValue.Arguments>
                        <p1:ParseGuid>
                          <InArgument x:TypeArguments="x:String">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentListID" />
                          </InArgument>
                        </p1:ParseGuid>
                      </p1:ExpressionContainerValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <p:WriteToHistory>
                  <p:WriteToHistory.Message>
                    <InArgument x:TypeArguments="x:String">
                      <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;List : &quot;+CurrentListID+&quot;\r\n&quot;+&#xA;&quot;ItemID : &quot;+CurrentItemID">
                        <p1:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="CurrentListID">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID1}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                          </InArgument>
                        </p1:ExpressionContainerValue.Arguments>
                        <p1:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                            <p1:ConcatString>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                <p1:ConcatString>
                                  <p1:ConcatString.Result>
                                    <OutArgument x:TypeArguments="x:String" />
                                  </p1:ConcatString.Result>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                    <p1:ConcatString>
                                      <p1:ConcatString.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p1:ConcatString.Result>
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="List : " />
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentListID" />
                                      </InArgument>
                                    </p1:ConcatString>
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xD;&#xA;" />
                                </p1:ConcatString>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="ItemID : " />
                            </p1:ConcatString>
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <p1:Convert x:TypeArguments="x:Int32, x:String">
                              <InArgument x:TypeArguments="x:Int32">
                                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                              </InArgument>
                            </p1:Convert>
                          </InArgument>
                        </p1:ConcatString>
                      </p1:ExpressionContainerValue>
                    </InArgument>
                  </p:WriteToHistory.Message>
                </p:WriteToHistory>
              </Sequence>
            </p:AppOnlySequence.Body>
          </p:AppOnlySequence>
        </State.Exit>
        <State.Transitions>
          <Transition DisplayName="T1">
            <Transition.To>
              <State x:Name="__ReferenceID43" DisplayName="Get RequestType">
                <State.Entry>
                  <Sequence>
                    <Sequence.Variables>
                      <Variable x:TypeArguments="p1:DynamicValue" x:Name="__ReferenceID4" Name="dv_0" />
                    </Sequence.Variables>
                    <p:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}">
                      <p:LookupSPListItem.ItemId>
                        <InArgument x:TypeArguments="x:Int32">
                          <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="CurrentItemID">
                            <p1:ExpressionContainerValue.Arguments>
                              <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                              </InArgument>
                            </p1:ExpressionContainerValue.Arguments>
                            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                          </p1:ExpressionContainerValue>
                        </InArgument>
                      </p:LookupSPListItem.ItemId>
                      <p:LookupSPListItem.ListId>
                        <InArgument x:TypeArguments="s:Guid">
                          <p1:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="CurrentListGUID">
                            <p1:ExpressionContainerValue.Arguments>
                              <InArgument x:TypeArguments="s:Guid" x:Key="CurrentListGUID">
                                <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID3}" />
                              </InArgument>
                            </p1:ExpressionContainerValue.Arguments>
                            <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="CurrentListGUID" />
                          </p1:ExpressionContainerValue>
                        </InArgument>
                      </p:LookupSPListItem.ListId>
                      <p:LookupSPListItem.Result>
                        <OutArgument x:TypeArguments="p1:DynamicValue">
                          <p1:ExpressionContainerReference x:TypeArguments="p1:DynamicValue" DisplayName="dv_0">
                            <p1:ExpressionContainerReference.Arguments>
                              <InOutArgument x:TypeArguments="p1:DynamicValue" x:Key="dv_0">
                                <VariableReference x:TypeArguments="p1:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                              </InOutArgument>
                            </p1:ExpressionContainerReference.Arguments>
                            <ArgumentReference x:TypeArguments="p1:DynamicValue" ArgumentName="dv_0" />
                          </p1:ExpressionContainerReference>
                        </OutArgument>
                      </p:LookupSPListItem.Result>
                    </p:LookupSPListItem>
                    <p1:GetODataProperties DisplayName="GetDynamicValueProperties">
                      <p1:GetODataProperties.Source>
                        <InArgument x:TypeArguments="p1:DynamicValue">
                          <p1:ExpressionContainerValue x:TypeArguments="p1:DynamicValue" DisplayName="dv_0">
                            <p1:ExpressionContainerValue.Arguments>
                              <InArgument x:TypeArguments="p1:DynamicValue" x:Key="dv_0">
                                <VariableValue x:TypeArguments="p1:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                              </InArgument>
                            </p1:ExpressionContainerValue.Arguments>
                            <ArgumentValue x:TypeArguments="p1:DynamicValue" ArgumentName="dv_0" />
                          </p1:ExpressionContainerValue>
                        </InArgument>
                      </p1:GetODataProperties.Source>
                      <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                        <OutArgument x:TypeArguments="x:String" x:Key="RequestType">
                          <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="RequestType">
                            <p1:ExpressionContainerReference.Arguments>
                              <InOutArgument x:TypeArguments="x:String" x:Key="RequestType">
                                <VariableReference x:TypeArguments="x:String">
                                  <VariableReference.Variable>
                                    <Variable x:TypeArguments="x:String" x:Name="__ReferenceID23" Name="RequestType" />
                                  </VariableReference.Variable>
                                </VariableReference>
                              </InOutArgument>
                            </p1:ExpressionContainerReference.Arguments>
                            <ArgumentReference x:TypeArguments="x:String" ArgumentName="RequestType" />
                          </p1:ExpressionContainerReference>
                        </OutArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="CurrentAppUrl">
                          <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="CurrentAppUrl">
                            <p1:ExpressionContainerReference.Arguments>
                              <InOutArgument x:TypeArguments="x:String" x:Key="CurrentAppUrl">
                                <VariableReference x:TypeArguments="x:String">
                                  <VariableReference.Variable>
                                    <Variable x:TypeArguments="x:String" x:Name="__ReferenceID7" Name="CurrentAppUrl" />
                                  </VariableReference.Variable>
                                </VariableReference>
                              </InOutArgument>
                            </p1:ExpressionContainerReference.Arguments>
                            <ArgumentReference x:TypeArguments="x:String" ArgumentName="CurrentAppUrl" />
                          </p1:ExpressionContainerReference>
                        </OutArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="CurrentHostUrl">
                          <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="CurrentHostUrl">
                            <p1:ExpressionContainerReference.Arguments>
                              <InOutArgument x:TypeArguments="x:String" x:Key="CurrentHostUrl">
                                <VariableReference x:TypeArguments="x:String">
                                  <VariableReference.Variable>
                                    <Variable x:TypeArguments="x:String" x:Name="__ReferenceID6" Name="CurrentHostUrl" />
                                  </VariableReference.Variable>
                                </VariableReference>
                              </InOutArgument>
                            </p1:ExpressionContainerReference.Arguments>
                            <ArgumentReference x:TypeArguments="x:String" ArgumentName="CurrentHostUrl" />
                          </p1:ExpressionContainerReference>
                        </OutArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="CurrentUrl">
                          <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="CurrentUrl">
                            <p1:ExpressionContainerReference.Arguments>
                              <InOutArgument x:TypeArguments="x:String" x:Key="CurrentUrl">
                                <VariableReference x:TypeArguments="x:String">
                                  <VariableReference.Variable>
                                    <Variable x:TypeArguments="x:String" x:Name="__ReferenceID5" Name="CurrentUrl" />
                                  </VariableReference.Variable>
                                </VariableReference>
                              </InOutArgument>
                            </p1:ExpressionContainerReference.Arguments>
                            <ArgumentReference x:TypeArguments="x:String" ArgumentName="CurrentUrl" />
                          </p1:ExpressionContainerReference>
                        </OutArgument>
                      </scg:Dictionary>
                    </p1:GetODataProperties>
                    <p:WriteToHistory>
                      <p:WriteToHistory.Message>
                        <InArgument x:TypeArguments="x:String">
                          <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="CurrentUrl+&quot;\r\n&quot;+&#xA;CurrentHostUrl + &quot;\r\n&quot;+&#xA;CurrentAppUrl + &quot;\r\n&quot;">
                            <p1:ExpressionContainerValue.Arguments>
                              <InArgument x:TypeArguments="x:String" x:Key="CurrentUrl">
                                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="CurrentHostUrl">
                                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="CurrentAppUrl">
                                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                              </InArgument>
                            </p1:ExpressionContainerValue.Arguments>
                            <p1:ConcatString>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                <p1:ConcatString>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                    <p1:ConcatString>
                                      <p1:ConcatString.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p1:ConcatString.Result>
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                        <p1:ConcatString>
                                          <p1:ConcatString.Result>
                                            <OutArgument x:TypeArguments="x:String" />
                                          </p1:ConcatString.Result>
                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                            <p1:ConcatString>
                                              <p1:ConcatString.Result>
                                                <OutArgument x:TypeArguments="x:String" />
                                              </p1:ConcatString.Result>
                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentUrl" />
                                              </InArgument>
                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xD;&#xA;" />
                                            </p1:ConcatString>
                                          </InArgument>
                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentHostUrl" />
                                          </InArgument>
                                        </p1:ConcatString>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xD;&#xA;" />
                                    </p1:ConcatString>
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentAppUrl" />
                                  </InArgument>
                                </p1:ConcatString>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xD;&#xA;" />
                            </p1:ConcatString>
                          </p1:ExpressionContainerValue>
                        </InArgument>
                      </p:WriteToHistory.Message>
                    </p:WriteToHistory>
                  </Sequence>
                </State.Entry>
                <State.Transitions>
                  <Transition DisplayName="T5">
                    <Transition.Condition>
                      <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestType.ToLower().Equals(&quot;new&quot;) || RequestType.ToLower().Equals(&quot;1&quot;)">
                        <p1:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestType">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestType1">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                          </InArgument>
                        </p1:ExpressionContainerValue.Arguments>
                        <p1:Or>
                          <p1:Or.Left>
                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                              <p1:IsEqualString Pattern="{x:Null}" Text="new">
                                <p1:IsEqualString.Input>
                                  <InArgument x:TypeArguments="x:String">
                                    <p1:ToLowerCase>
                                      <p1:ToLowerCase.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p1:ToLowerCase.Result>
                                      <InArgument x:TypeArguments="x:String">
                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType" />
                                      </InArgument>
                                    </p1:ToLowerCase>
                                  </InArgument>
                                </p1:IsEqualString.Input>
                              </p1:IsEqualString>
                            </InArgument>
                          </p1:Or.Left>
                          <p1:Or.Right>
                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                              <p1:IsEqualString Pattern="{x:Null}" Text="1">
                                <p1:IsEqualString.Input>
                                  <InArgument x:TypeArguments="x:String">
                                    <p1:ToLowerCase>
                                      <p1:ToLowerCase.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p1:ToLowerCase.Result>
                                      <InArgument x:TypeArguments="x:String">
                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType1" />
                                      </InArgument>
                                    </p1:ToLowerCase>
                                  </InArgument>
                                </p1:IsEqualString.Input>
                              </p1:IsEqualString>
                            </InArgument>
                          </p1:Or.Right>
                        </p1:Or>
                      </p1:ExpressionContainerValue>
                    </Transition.Condition>
                    <Transition.To>
                      <State x:Name="__ReferenceID42" DisplayName="Set Status to Inprogress (New)">
                        <State.Entry>
                          <Sequence>
                            <p:AppOnlySequence>
                              <p:AppOnlySequence.Body>
                                <Sequence>
                                  <p:WriteToHistory Message="Request : New" />
                                  <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                    <p:UpdateListItem.ItemId>
                                      <InArgument x:TypeArguments="x:Int32">
                                        <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="CurrentItemID">
                                          <p1:ExpressionContainerValue.Arguments>
                                            <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                              <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                            </InArgument>
                                          </p1:ExpressionContainerValue.Arguments>
                                          <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                        </p1:ExpressionContainerValue>
                                      </InArgument>
                                    </p:UpdateListItem.ItemId>
                                    <p:UpdateListItem.ListId>
                                      <InArgument x:TypeArguments="s:Guid">
                                        <p1:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="CurrentListGUID">
                                          <p1:ExpressionContainerValue.Arguments>
                                            <InArgument x:TypeArguments="s:Guid" x:Key="CurrentListGUID">
                                              <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID3}" />
                                            </InArgument>
                                          </p1:ExpressionContainerValue.Arguments>
                                          <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="CurrentListGUID" />
                                        </p1:ExpressionContainerValue>
                                      </InArgument>
                                    </p:UpdateListItem.ListId>
                                    <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                      <InArgument x:TypeArguments="p1:DynamicValue">
                                        <p1:SetDynamicValueProperties>
                                          <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                            <InArgument x:TypeArguments="x:String" x:Key="LeaveStatus">In Progress</InArgument>
                                          </scg:Dictionary>
                                        </p1:SetDynamicValueProperties>
                                      </InArgument>
                                    </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                  </p:UpdateListItem>
                                  <p1:SetUserStatus Description="In Progress" DisplayName="Set In Progress" />
                                </Sequence>
                              </p:AppOnlySequence.Body>
                            </p:AppOnlySequence>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">
                                  <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="ApproveStatus">
                                    <p1:ExpressionContainerReference.Arguments>
                                      <InOutArgument x:TypeArguments="x:String" x:Key="ApproveStatus">
                                        <VariableReference x:TypeArguments="x:String">
                                          <VariableReference.Variable>
                                            <Variable x:TypeArguments="x:String" x:Name="__ReferenceID25" Name="ApproveStatus" />
                                          </VariableReference.Variable>
                                        </VariableReference>
                                      </InOutArgument>
                                    </p1:ExpressionContainerReference.Arguments>
                                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="ApproveStatus" />
                                  </p1:ExpressionContainerReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">In Progress</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </State.Entry>
                        <State.Transitions>
                          <Transition DisplayName="T2">
                            <Transition.To>
                              <State x:Name="__ReferenceID40" DisplayName="Get Item Information">
                                <State.Exit>
                                  <p:AppOnlySequence>
                                    <p:AppOnlySequence.Body>
                                      <Sequence>
                                        <Sequence.Variables>
                                          <Variable x:TypeArguments="p1:DynamicValue" x:Name="__ReferenceID8" Name="listItemProps" />
                                          <Variable x:TypeArguments="sco:Collection(x:Int32)" Name="testCollectionInt" />
                                          <Variable x:TypeArguments="x:String" Name="hrarray" />
                                        </Sequence.Variables>
                                        <p:WriteToHistory Message="Step Get Information" />
                                        <p:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}">
                                          <p:LookupSPListItem.ItemId>
                                            <InArgument x:TypeArguments="x:Int32">
                                              <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="CurrentItemID">
                                                <p1:ExpressionContainerValue.Arguments>
                                                  <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                                  </InArgument>
                                                </p1:ExpressionContainerValue.Arguments>
                                                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                              </p1:ExpressionContainerValue>
                                            </InArgument>
                                          </p:LookupSPListItem.ItemId>
                                          <p:LookupSPListItem.ListId>
                                            <InArgument x:TypeArguments="s:Guid">
                                              <p1:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="CurrentListGUID">
                                                <p1:ExpressionContainerValue.Arguments>
                                                  <InArgument x:TypeArguments="s:Guid" x:Key="CurrentListGUID">
                                                    <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID3}" />
                                                  </InArgument>
                                                </p1:ExpressionContainerValue.Arguments>
                                                <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="CurrentListGUID" />
                                              </p1:ExpressionContainerValue>
                                            </InArgument>
                                          </p:LookupSPListItem.ListId>
                                          <p:LookupSPListItem.Result>
                                            <OutArgument x:TypeArguments="p1:DynamicValue">
                                              <p1:ExpressionContainerReference x:TypeArguments="p1:DynamicValue" DisplayName="listItemProps">
                                                <p1:ExpressionContainerReference.Arguments>
                                                  <InOutArgument x:TypeArguments="p1:DynamicValue" x:Key="listItemProps">
                                                    <VariableReference x:TypeArguments="p1:DynamicValue" Variable="{x:Reference __ReferenceID8}" />
                                                  </InOutArgument>
                                                </p1:ExpressionContainerReference.Arguments>
                                                <ArgumentReference x:TypeArguments="p1:DynamicValue" ArgumentName="listItemProps" />
                                              </p1:ExpressionContainerReference>
                                            </OutArgument>
                                          </p:LookupSPListItem.Result>
                                        </p:LookupSPListItem>
                                        <p1:GetODataProperties DisplayName="GetDynamicValueProperties">
                                          <p1:GetODataProperties.Source>
                                            <InArgument x:TypeArguments="p1:DynamicValue">
                                              <p1:ExpressionContainerValue x:TypeArguments="p1:DynamicValue" DisplayName="listItemProps">
                                                <p1:ExpressionContainerValue.Arguments>
                                                  <InArgument x:TypeArguments="p1:DynamicValue" x:Key="listItemProps">
                                                    <VariableValue x:TypeArguments="p1:DynamicValue" Variable="{x:Reference __ReferenceID8}" />
                                                  </InArgument>
                                                </p1:ExpressionContainerValue.Arguments>
                                                <ArgumentValue x:TypeArguments="p1:DynamicValue" ArgumentName="listItemProps" />
                                              </p1:ExpressionContainerValue>
                                            </InArgument>
                                          </p1:GetODataProperties.Source>
                                          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                                            <OutArgument x:TypeArguments="x:String" x:Key="OfficerApproverStringId">
                                              <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="OfficerManager">
                                                <p1:ExpressionContainerReference.Arguments>
                                                  <InOutArgument x:TypeArguments="x:String" x:Key="OfficerManager">
                                                    <VariableReference x:TypeArguments="x:String">
                                                      <VariableReference.Variable>
                                                        <Variable x:TypeArguments="x:String" x:Name="__ReferenceID11" Name="OfficerManager" />
                                                      </VariableReference.Variable>
                                                    </VariableReference>
                                                  </InOutArgument>
                                                </p1:ExpressionContainerReference.Arguments>
                                                <ArgumentReference x:TypeArguments="x:String" ArgumentName="OfficerManager" />
                                              </p1:ExpressionContainerReference>
                                            </OutArgument>
                                            <OutArgument x:TypeArguments="p1:DynamicValue" x:Key="OfficerHrStringId">
                                              <p1:ExpressionContainerReference x:TypeArguments="p1:DynamicValue" DisplayName="dynamichr">
                                                <p1:ExpressionContainerReference.Arguments>
                                                  <InOutArgument x:TypeArguments="p1:DynamicValue" x:Key="dynamichr">
                                                    <VariableReference x:TypeArguments="p1:DynamicValue">
                                                      <VariableReference.Variable>
                                                        <Variable x:TypeArguments="p1:DynamicValue" x:Name="__ReferenceID9" Name="dynamichr" />
                                                      </VariableReference.Variable>
                                                    </VariableReference>
                                                  </InOutArgument>
                                                </p1:ExpressionContainerReference.Arguments>
                                                <ArgumentReference x:TypeArguments="p1:DynamicValue" ArgumentName="dynamichr" />
                                              </p1:ExpressionContainerReference>
                                            </OutArgument>
                                            <OutArgument x:TypeArguments="x:String" x:Key="Title">
                                              <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Title">
                                                <p1:ExpressionContainerReference.Arguments>
                                                  <InOutArgument x:TypeArguments="x:String" x:Key="Title">
                                                    <VariableReference x:TypeArguments="x:String">
                                                      <VariableReference.Variable>
                                                        <Variable x:TypeArguments="x:String" x:Name="__ReferenceID17" Name="Title" />
                                                      </VariableReference.Variable>
                                                    </VariableReference>
                                                  </InOutArgument>
                                                </p1:ExpressionContainerReference.Arguments>
                                                <ArgumentReference x:TypeArguments="x:String" ArgumentName="Title" />
                                              </p1:ExpressionContainerReference>
                                            </OutArgument>
                                            <OutArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                              <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="LeaveType">
                                                <p1:ExpressionContainerReference.Arguments>
                                                  <InOutArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                                    <VariableReference x:TypeArguments="x:String">
                                                      <VariableReference.Variable>
                                                        <Variable x:TypeArguments="x:String" x:Name="__ReferenceID15" Name="LeaveType" />
                                                      </VariableReference.Variable>
                                                    </VariableReference>
                                                  </InOutArgument>
                                                </p1:ExpressionContainerReference.Arguments>
                                                <ArgumentReference x:TypeArguments="x:String" ArgumentName="LeaveType" />
                                              </p1:ExpressionContainerReference>
                                            </OutArgument>
                                            <OutArgument x:TypeArguments="x:Double" x:Key="LeaveDayTotal">
                                              <p1:ExpressionContainerReference x:TypeArguments="x:Double" DisplayName="NumberOfDay">
                                                <p1:ExpressionContainerReference.Arguments>
                                                  <InOutArgument x:TypeArguments="x:Double" x:Key="NumberOfDay">
                                                    <VariableReference x:TypeArguments="x:Double">
                                                      <VariableReference.Variable>
                                                        <Variable x:TypeArguments="x:Double" x:Name="__ReferenceID50" Name="NumberOfDay" />
                                                      </VariableReference.Variable>
                                                    </VariableReference>
                                                  </InOutArgument>
                                                </p1:ExpressionContainerReference.Arguments>
                                                <ArgumentReference x:TypeArguments="x:Double" ArgumentName="NumberOfDay" />
                                              </p1:ExpressionContainerReference>
                                            </OutArgument>
                                            <OutArgument x:TypeArguments="x:String" x:Key="LeaveStatus">
                                              <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="LeaveStatus">
                                                <p1:ExpressionContainerReference.Arguments>
                                                  <InOutArgument x:TypeArguments="x:String" x:Key="LeaveStatus">
                                                    <VariableReference x:TypeArguments="x:String">
                                                      <VariableReference.Variable>
                                                        <Variable x:TypeArguments="x:String" x:Name="__ReferenceID19" Name="LeaveStatus" />
                                                      </VariableReference.Variable>
                                                    </VariableReference>
                                                  </InOutArgument>
                                                </p1:ExpressionContainerReference.Arguments>
                                                <ArgumentReference x:TypeArguments="x:String" ArgumentName="LeaveStatus" />
                                              </p1:ExpressionContainerReference>
                                            </OutArgument>
                                            <OutArgument x:TypeArguments="x:String" x:Key="RequesterStringId">
                                              <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="RequesterId">
                                                <p1:ExpressionContainerReference.Arguments>
                                                  <InOutArgument x:TypeArguments="x:String" x:Key="RequesterId">
                                                    <VariableReference x:TypeArguments="x:String">
                                                      <VariableReference.Variable>
                                                        <Variable x:TypeArguments="x:String" x:Name="__ReferenceID10" Name="RequesterId" />
                                                      </VariableReference.Variable>
                                                    </VariableReference>
                                                  </InOutArgument>
                                                </p1:ExpressionContainerReference.Arguments>
                                                <ArgumentReference x:TypeArguments="x:String" ArgumentName="RequesterId" />
                                              </p1:ExpressionContainerReference>
                                            </OutArgument>
                                            <OutArgument x:TypeArguments="x:String" x:Key="LeaveDictionary">
                                              <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="LeaveDictionaryText">
                                                <p1:ExpressionContainerReference.Arguments>
                                                  <InOutArgument x:TypeArguments="x:String" x:Key="LeaveDictionaryText">
                                                    <VariableReference x:TypeArguments="x:String">
                                                      <VariableReference.Variable>
                                                        <Variable x:TypeArguments="x:String" x:Name="__ReferenceID13" Name="LeaveDictionaryText" />
                                                      </VariableReference.Variable>
                                                    </VariableReference>
                                                  </InOutArgument>
                                                </p1:ExpressionContainerReference.Arguments>
                                                <ArgumentReference x:TypeArguments="x:String" ArgumentName="LeaveDictionaryText" />
                                              </p1:ExpressionContainerReference>
                                            </OutArgument>
                                          </scg:Dictionary>
                                        </p1:GetODataProperties>
                                        <If>
                                          <If.Condition>
                                            <InArgument x:TypeArguments="x:Boolean">
                                              <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="dynamichr != null">
                                                <p1:ExpressionContainerValue.Arguments>
                                                  <InArgument x:TypeArguments="p1:DynamicValue" x:Key="dynamichr">
                                                    <VariableValue x:TypeArguments="p1:DynamicValue" Variable="{x:Reference __ReferenceID9}" />
                                                  </InArgument>
                                                </p1:ExpressionContainerValue.Arguments>
                                                <p1:Not>
                                                  <InArgument x:TypeArguments="x:Boolean">
                                                    <p1:IsEqual x:TypeArguments="p1:DynamicValue">
                                                      <p1:IsEqual.Left>
                                                        <InArgument x:TypeArguments="p1:DynamicValue">
                                                          <ArgumentValue x:TypeArguments="p1:DynamicValue" ArgumentName="dynamichr" />
                                                        </InArgument>
                                                      </p1:IsEqual.Left>
                                                      <p1:IsEqual.Right>
                                                        <InArgument x:TypeArguments="p1:DynamicValue">
                                                          <p1:NullLiteral x:TypeArguments="p1:DynamicValue">
                                                            <p1:NullLiteral.Result>
                                                              <OutArgument x:TypeArguments="p1:DynamicValue" />
                                                            </p1:NullLiteral.Result>
                                                          </p1:NullLiteral>
                                                        </InArgument>
                                                      </p1:IsEqual.Right>
                                                    </p1:IsEqual>
                                                  </InArgument>
                                                </p1:Not>
                                              </p1:ExpressionContainerValue>
                                            </InArgument>
                                          </If.Condition>
                                          <If.Then>
                                            <Sequence>
                                              <p1:GetODataProperties DisplayName="GetDynamicValueProperties">
                                                <p1:GetODataProperties.Source>
                                                  <InArgument x:TypeArguments="p1:DynamicValue">
                                                    <p1:ExpressionContainerValue x:TypeArguments="p1:DynamicValue" DisplayName="dynamichr">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="p1:DynamicValue" x:Key="dynamichr">
                                                          <VariableValue x:TypeArguments="p1:DynamicValue" Variable="{x:Reference __ReferenceID9}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <ArgumentValue x:TypeArguments="p1:DynamicValue" ArgumentName="dynamichr" />
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </p1:GetODataProperties.Source>
                                                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                                                  <OutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="results">
                                                    <p1:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="listHrApprove">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="listHrApprove">
                                                          <VariableReference x:TypeArguments="sco:Collection(x:String)">
                                                            <VariableReference.Variable>
                                                              <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID12" Name="listHrApprove" />
                                                            </VariableReference.Variable>
                                                          </VariableReference>
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="listHrApprove" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </scg:Dictionary>
                                              </p1:GetODataProperties>
                                              <p:WriteToHistory>
                                                <p:WriteToHistory.Message>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="dynamichr.ToString()">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:Object" x:Key="dynamichr">
                                                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID9}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <p1:ToString>
                                                        <InArgument x:TypeArguments="x:Object">
                                                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="dynamichr" />
                                                        </InArgument>
                                                      </p1:ToString>
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </p:WriteToHistory.Message>
                                              </p:WriteToHistory>
                                            </Sequence>
                                          </If.Then>
                                        </If>
                                        <p:WriteToHistory>
                                          <p:WriteToHistory.Message>
                                            <InArgument x:TypeArguments="x:String">
                                              <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;RequesterId ID in Get Info : &quot; + RequesterId +&#xA;&quot;\r\nManager ID in Get Info : &quot; +OfficerManager+&#xA;&quot;\r\nHR ID in Get Info : &quot; + listHrApprove.Count">
                                                <p1:ExpressionContainerValue.Arguments>
                                                  <InArgument x:TypeArguments="x:String" x:Key="RequesterId">
                                                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                                                  </InArgument>
                                                  <InArgument x:TypeArguments="x:String" x:Key="OfficerManager">
                                                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                                                  </InArgument>
                                                  <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="listHrApprove">
                                                    <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID12}" />
                                                  </InArgument>
                                                </p1:ExpressionContainerValue.Arguments>
                                                <p1:ConcatString>
                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                    <p1:ConcatString>
                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                        <p1:ConcatString>
                                                          <p1:ConcatString.Result>
                                                            <OutArgument x:TypeArguments="x:String" />
                                                          </p1:ConcatString.Result>
                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                            <p1:ConcatString>
                                                              <p1:ConcatString.Result>
                                                                <OutArgument x:TypeArguments="x:String" />
                                                              </p1:ConcatString.Result>
                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                <p1:ConcatString>
                                                                  <p1:ConcatString.Result>
                                                                    <OutArgument x:TypeArguments="x:String" />
                                                                  </p1:ConcatString.Result>
                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="RequesterId ID in Get Info : " />
                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequesterId" />
                                                                  </InArgument>
                                                                </p1:ConcatString>
                                                              </InArgument>
                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xD;&#xA;Manager ID in Get Info : " />
                                                            </p1:ConcatString>
                                                          </InArgument>
                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="OfficerManager" />
                                                          </InArgument>
                                                        </p1:ConcatString>
                                                      </InArgument>
                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xD;&#xA;HR ID in Get Info : " />
                                                    </p1:ConcatString>
                                                  </InArgument>
                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                    <p1:Convert x:TypeArguments="x:Int32, x:String">
                                                      <InArgument x:TypeArguments="x:Int32">
                                                        <p1:CountCollection x:TypeArguments="x:String">
                                                          <p1:CountCollection.Collection>
                                                            <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                              <p1:Convert x:TypeArguments="sco:Collection(x:String), scg:ICollection(x:String)">
                                                                <p1:Convert.Result>
                                                                  <OutArgument x:TypeArguments="scg:ICollection(x:String)" />
                                                                </p1:Convert.Result>
                                                                <InArgument x:TypeArguments="sco:Collection(x:String)">
                                                                  <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="listHrApprove" />
                                                                </InArgument>
                                                              </p1:Convert>
                                                            </InArgument>
                                                          </p1:CountCollection.Collection>
                                                          <p1:CountCollection.Result>
                                                            <OutArgument x:TypeArguments="x:Int32" />
                                                          </p1:CountCollection.Result>
                                                        </p1:CountCollection>
                                                      </InArgument>
                                                    </p1:Convert>
                                                  </InArgument>
                                                </p1:ConcatString>
                                              </p1:ExpressionContainerValue>
                                            </InArgument>
                                          </p:WriteToHistory.Message>
                                        </p:WriteToHistory>
                                        <If>
                                          <If.Condition>
                                            <InArgument x:TypeArguments="x:Boolean">
                                              <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="!string.IsNullOrEmpty(LeaveDictionaryText)">
                                                <p1:ExpressionContainerValue.Arguments>
                                                  <InArgument x:TypeArguments="x:String" x:Key="LeaveDictionaryText">
                                                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID13}" />
                                                  </InArgument>
                                                </p1:ExpressionContainerValue.Arguments>
                                                <p1:Not>
                                                  <InArgument x:TypeArguments="x:Boolean">
                                                    <p1:IsEmptyString>
                                                      <InArgument x:TypeArguments="x:String">
                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveDictionaryText" />
                                                      </InArgument>
                                                    </p1:IsEmptyString>
                                                  </InArgument>
                                                </p1:Not>
                                              </p1:ExpressionContainerValue>
                                            </InArgument>
                                          </If.Condition>
                                          <If.Then>
                                            <Sequence>
                                              <Sequence.Variables>
                                                <Variable x:TypeArguments="x:String" Name="MaxValueTest" />
                                                <Variable x:TypeArguments="p1:DynamicValue" x:Name="__ReferenceID14" Name="LeaveDictionary" />
                                                <Variable x:TypeArguments="x:String" x:Name="__ReferenceID16" Name="LeaveTextTitle" />
                                              </Sequence.Variables>
                                              <p1:ParseDynamicValue>
                                                <p1:ParseDynamicValue.Result>
                                                  <OutArgument x:TypeArguments="p1:DynamicValue">
                                                    <p1:ExpressionContainerReference x:TypeArguments="p1:DynamicValue" DisplayName="LeaveDictionary">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="p1:DynamicValue" x:Key="LeaveDictionary">
                                                          <VariableReference x:TypeArguments="p1:DynamicValue" Variable="{x:Reference __ReferenceID14}" />
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="p1:DynamicValue" ArgumentName="LeaveDictionary" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </p1:ParseDynamicValue.Result>
                                                <InArgument x:TypeArguments="x:String">
                                                  <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="LeaveDictionaryText">
                                                    <p1:ExpressionContainerValue.Arguments>
                                                      <InArgument x:TypeArguments="x:String" x:Key="LeaveDictionaryText">
                                                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID13}" />
                                                      </InArgument>
                                                    </p1:ExpressionContainerValue.Arguments>
                                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveDictionaryText" />
                                                  </p1:ExpressionContainerValue>
                                                </InArgument>
                                              </p1:ParseDynamicValue>
                                              <p1:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="LeaveTextTitle">
                                                <p1:GetDynamicValueProperty.PropertyName>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="LeaveType">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveType" />
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </p1:GetDynamicValueProperty.PropertyName>
                                                <p1:GetDynamicValueProperty.Result>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="LeaveTextTitle">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="LeaveTextTitle">
                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="LeaveTextTitle" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </p1:GetDynamicValueProperty.Result>
                                                <p1:GetDynamicValueProperty.Source>
                                                  <InArgument x:TypeArguments="p1:DynamicValue">
                                                    <p1:ExpressionContainerValue x:TypeArguments="p1:DynamicValue" DisplayName="LeaveDictionary">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="p1:DynamicValue" x:Key="LeaveDictionary">
                                                          <VariableValue x:TypeArguments="p1:DynamicValue" Variable="{x:Reference __ReferenceID14}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <ArgumentValue x:TypeArguments="p1:DynamicValue" ArgumentName="LeaveDictionary" />
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </p1:GetDynamicValueProperty.Source>
                                              </p1:GetDynamicValueProperty>
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="LeaveType">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="LeaveType" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="LeaveTextTitle">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="LeaveTextTitle">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveTextTitle" />
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                            </Sequence>
                                          </If.Then>
                                        </If>
                                      </Sequence>
                                    </p:AppOnlySequence.Body>
                                  </p:AppOnlySequence>
                                </State.Exit>
                                <State.Transitions>
                                  <Transition DisplayName="T3">
                                    <Transition.Condition>
                                      <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestType.ToLower().Equals(&quot;new&quot;) || RequestType.ToLower().Equals(&quot;1&quot;)">
                                        <p1:ExpressionContainerValue.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="RequestType">
                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                          </InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="RequestType1">
                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                          </InArgument>
                                        </p1:ExpressionContainerValue.Arguments>
                                        <p1:Or>
                                          <p1:Or.Left>
                                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                                              <p1:IsEqualString Pattern="{x:Null}" Text="new">
                                                <p1:IsEqualString.Input>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ToLowerCase>
                                                      <p1:ToLowerCase.Result>
                                                        <OutArgument x:TypeArguments="x:String" />
                                                      </p1:ToLowerCase.Result>
                                                      <InArgument x:TypeArguments="x:String">
                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType" />
                                                      </InArgument>
                                                    </p1:ToLowerCase>
                                                  </InArgument>
                                                </p1:IsEqualString.Input>
                                              </p1:IsEqualString>
                                            </InArgument>
                                          </p1:Or.Left>
                                          <p1:Or.Right>
                                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                                              <p1:IsEqualString Pattern="{x:Null}" Text="1">
                                                <p1:IsEqualString.Input>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ToLowerCase>
                                                      <p1:ToLowerCase.Result>
                                                        <OutArgument x:TypeArguments="x:String" />
                                                      </p1:ToLowerCase.Result>
                                                      <InArgument x:TypeArguments="x:String">
                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType1" />
                                                      </InArgument>
                                                    </p1:ToLowerCase>
                                                  </InArgument>
                                                </p1:IsEqualString.Input>
                                              </p1:IsEqualString>
                                            </InArgument>
                                          </p1:Or.Right>
                                        </p1:Or>
                                      </p1:ExpressionContainerValue>
                                    </Transition.Condition>
                                    <Transition.To>
                                      <State x:Name="__ReferenceID45" DisplayName="Manager Title Body (New)">
                                        <State.Entry>
                                          <Sequence>
                                            <Sequence DisplayName="Manager">
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="TitleManagerEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="TitleManagerEmail">
                                                          <VariableReference x:TypeArguments="x:String">
                                                            <VariableReference.Variable>
                                                              <Variable x:TypeArguments="x:String" x:Name="__ReferenceID20" Name="TitleManagerEmail" />
                                                            </VariableReference.Variable>
                                                          </VariableReference>
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="TitleManagerEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;แจ้งการขออนุมัติการลาของ &quot; + Title">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <p1:ConcatString>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="แจ้งการขออนุมัติการลาของ " />
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                        </InArgument>
                                                      </p1:ConcatString>
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="BodyManagerEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="BodyManagerEmail">
                                                          <VariableReference x:TypeArguments="x:String">
                                                            <VariableReference.Variable>
                                                              <Variable x:TypeArguments="x:String" x:Name="__ReferenceID21" Name="BodyManagerEmail" />
                                                            </VariableReference.Variable>
                                                          </VariableReference>
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="BodyManagerEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;กรุณาพิจารณา การลา &quot; + LeaveType + &quot; ของ &quot; +Title">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                                                        </InArgument>
                                                        <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <p1:ConcatString>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                          <p1:ConcatString>
                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                              <p1:ConcatString>
                                                                <p1:ConcatString.Result>
                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                </p1:ConcatString.Result>
                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="กรุณาพิจารณา การลา " />
                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveType" />
                                                                </InArgument>
                                                              </p1:ConcatString>
                                                            </InArgument>
                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" ของ " />
                                                          </p1:ConcatString>
                                                        </InArgument>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                        </InArgument>
                                                      </p1:ConcatString>
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                            </Sequence>
                                            <Sequence DisplayName="Requester">
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="TitleRequesterEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="TitleRequesterEmail">
                                                          <VariableReference x:TypeArguments="x:String">
                                                            <VariableReference.Variable>
                                                              <Variable x:TypeArguments="x:String" x:Name="__ReferenceID27" Name="TitleRequesterEmail" />
                                                            </VariableReference.Variable>
                                                          </VariableReference>
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="TitleRequesterEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">แจ้งผลการขออนุมัติการลา</InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="BodyRequesterEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="BodyRequesterEmail">
                                                          <VariableReference x:TypeArguments="x:String">
                                                            <VariableReference.Variable>
                                                              <Variable x:TypeArguments="x:String" x:Name="__ReferenceID26" Name="BodyRequesterEmail" />
                                                            </VariableReference.Variable>
                                                          </VariableReference>
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="BodyRequesterEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String" xml:space="preserve">ผู้อนุมัติได้พิจารณา </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                            </Sequence>
                                            <Sequence DisplayName="HR">
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="TitleHREmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="TitleHREmail">
                                                          <VariableReference x:TypeArguments="x:String">
                                                            <VariableReference.Variable>
                                                              <Variable x:TypeArguments="x:String" x:Name="__ReferenceID36" Name="TitleHREmail" />
                                                            </VariableReference.Variable>
                                                          </VariableReference>
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="TitleHREmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Review : แจ้งผลการขออนุมัติการลาของ &quot;+Title">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <p1:ConcatString>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Review : แจ้งผลการขออนุมัติการลาของ " />
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                        </InArgument>
                                                      </p1:ConcatString>
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="BodyHrEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="BodyHrEmail">
                                                          <VariableReference x:TypeArguments="x:String">
                                                            <VariableReference.Variable>
                                                              <Variable x:TypeArguments="x:String" x:Name="__ReferenceID35" Name="BodyHrEmail" />
                                                            </VariableReference.Variable>
                                                          </VariableReference>
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="BodyHrEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;ตามที่ &quot;+ Title + &quot;ได้ขออนุมัติการลา &quot;+LeaveType+&quot; โดยมีผลการพิจารณา คือ &quot;">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                        </InArgument>
                                                        <InArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <p1:ConcatString>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                          <p1:ConcatString>
                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                              <p1:ConcatString>
                                                                <p1:ConcatString.Result>
                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                </p1:ConcatString.Result>
                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                  <p1:ConcatString>
                                                                    <p1:ConcatString.Result>
                                                                      <OutArgument x:TypeArguments="x:String" />
                                                                    </p1:ConcatString.Result>
                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="ตามที่ " />
                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                                    </InArgument>
                                                                  </p1:ConcatString>
                                                                </InArgument>
                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="ได้ขออนุมัติการลา " />
                                                              </p1:ConcatString>
                                                            </InArgument>
                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveType" />
                                                            </InArgument>
                                                          </p1:ConcatString>
                                                        </InArgument>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" โดยมีผลการพิจารณา คือ " />
                                                      </p1:ConcatString>
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                            </Sequence>
                                          </Sequence>
                                        </State.Entry>
                                        <State.Transitions>
                                          <Transition DisplayName="T11">
                                            <Transition.To>
                                              <State x:Name="__ReferenceID39" DisplayName="Send  Task">
                                                <State.Entry>
                                                  <Sequence>
                                                    <Assign>
                                                      <Assign.To>
                                                        <OutArgument x:TypeArguments="x:Int32">
                                                          <p1:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="iscancelstate">
                                                            <p1:ExpressionContainerReference.Arguments>
                                                              <InOutArgument x:TypeArguments="x:Int32" x:Key="iscancelstate">
                                                                <VariableReference x:TypeArguments="x:Int32">
                                                                  <VariableReference.Variable>
                                                                    <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID34" Name="iscancelstate" />
                                                                  </VariableReference.Variable>
                                                                </VariableReference>
                                                              </InOutArgument>
                                                            </p1:ExpressionContainerReference.Arguments>
                                                            <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="iscancelstate" />
                                                          </p1:ExpressionContainerReference>
                                                        </OutArgument>
                                                      </Assign.To>
                                                      <Assign.Value>
                                                        <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                                      </Assign.Value>
                                                    </Assign>
                                                    <Assign>
                                                      <Assign.To>
                                                        <OutArgument x:TypeArguments="x:Boolean">
                                                          <p1:ExpressionContainerReference x:TypeArguments="x:Boolean" DisplayName="iscompleteParallel">
                                                            <p1:ExpressionContainerReference.Arguments>
                                                              <InOutArgument x:TypeArguments="x:Boolean" x:Key="iscompleteParallel">
                                                                <VariableReference x:TypeArguments="x:Boolean">
                                                                  <VariableReference.Variable>
                                                                    <Variable x:TypeArguments="x:Boolean" x:Name="__ReferenceID18" Name="iscompleteParallel" />
                                                                  </VariableReference.Variable>
                                                                </VariableReference>
                                                              </InOutArgument>
                                                            </p1:ExpressionContainerReference.Arguments>
                                                            <ArgumentReference x:TypeArguments="x:Boolean" ArgumentName="iscompleteParallel" />
                                                          </p1:ExpressionContainerReference>
                                                        </OutArgument>
                                                      </Assign.To>
                                                      <Assign.Value>
                                                        <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                                      </Assign.Value>
                                                    </Assign>
                                                    <Parallel>
                                                      <Parallel.CompletionCondition>
                                                        <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="iscompleteParallel">
                                                          <p1:ExpressionContainerValue.Arguments>
                                                            <InArgument x:TypeArguments="x:Boolean" x:Key="iscompleteParallel">
                                                              <VariableValue x:TypeArguments="x:Boolean" Variable="{x:Reference __ReferenceID18}" />
                                                            </InArgument>
                                                          </p1:ExpressionContainerValue.Arguments>
                                                          <ArgumentValue x:TypeArguments="x:Boolean" ArgumentName="iscompleteParallel" />
                                                        </p1:ExpressionContainerValue>
                                                      </Parallel.CompletionCondition>
                                                      <TryCatch>
                                                        <TryCatch.Variables>
                                                          <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID31" Name="errorindex" />
                                                          <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID32" Name="errormax" />
                                                          <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID33" Name="errorlen" />
                                                        </TryCatch.Variables>
                                                        <TryCatch.Try>
                                                          <p:AppOnlySequence DisplayName="AppOnlySequence Task to Controller">
                                                            <p:AppOnlySequence.Body>
                                                              <Sequence>
                                                                <p:WriteToHistory>
                                                                  <p:WriteToHistory.Message>
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;--Manager ID in Send Task : &quot;+OfficerManager+&#xA;&quot;--HR ID in Send Task : &quot; + listHrApprove.Count +&#xA;&quot;--Title in Send Task : &quot; + Title + &#xA;&quot;--LeaveStatus in Send Task : &quot; + LeaveStatus + &#xA;&quot;--LeaveType in Send Task : &quot; + LeaveType">
                                                                        <p1:ExpressionContainerValue.Arguments>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="OfficerManager">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="listHrApprove">
                                                                            <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID12}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="LeaveStatus">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                                                                          </InArgument>
                                                                        </p1:ExpressionContainerValue.Arguments>
                                                                        <p1:ConcatString>
                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                            <p1:ConcatString>
                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                <p1:ConcatString>
                                                                                  <p1:ConcatString.Result>
                                                                                    <OutArgument x:TypeArguments="x:String" />
                                                                                  </p1:ConcatString.Result>
                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                    <p1:ConcatString>
                                                                                      <p1:ConcatString.Result>
                                                                                        <OutArgument x:TypeArguments="x:String" />
                                                                                      </p1:ConcatString.Result>
                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                        <p1:ConcatString>
                                                                                          <p1:ConcatString.Result>
                                                                                            <OutArgument x:TypeArguments="x:String" />
                                                                                          </p1:ConcatString.Result>
                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                            <p1:ConcatString>
                                                                                              <p1:ConcatString.Result>
                                                                                                <OutArgument x:TypeArguments="x:String" />
                                                                                              </p1:ConcatString.Result>
                                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                <p1:ConcatString>
                                                                                                  <p1:ConcatString.Result>
                                                                                                    <OutArgument x:TypeArguments="x:String" />
                                                                                                  </p1:ConcatString.Result>
                                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                    <p1:ConcatString>
                                                                                                      <p1:ConcatString.Result>
                                                                                                        <OutArgument x:TypeArguments="x:String" />
                                                                                                      </p1:ConcatString.Result>
                                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                        <p1:ConcatString>
                                                                                                          <p1:ConcatString.Result>
                                                                                                            <OutArgument x:TypeArguments="x:String" />
                                                                                                          </p1:ConcatString.Result>
                                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="--Manager ID in Send Task : " />
                                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="OfficerManager" />
                                                                                                          </InArgument>
                                                                                                        </p1:ConcatString>
                                                                                                      </InArgument>
                                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="--HR ID in Send Task : " />
                                                                                                    </p1:ConcatString>
                                                                                                  </InArgument>
                                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                    <p1:Convert x:TypeArguments="x:Int32, x:String">
                                                                                                      <p1:Convert.Result>
                                                                                                        <OutArgument x:TypeArguments="x:String" />
                                                                                                      </p1:Convert.Result>
                                                                                                      <InArgument x:TypeArguments="x:Int32">
                                                                                                        <p1:CountCollection x:TypeArguments="x:String">
                                                                                                          <p1:CountCollection.Collection>
                                                                                                            <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                                                              <p1:Convert x:TypeArguments="sco:Collection(x:String), scg:ICollection(x:String)">
                                                                                                                <p1:Convert.Result>
                                                                                                                  <OutArgument x:TypeArguments="scg:ICollection(x:String)" />
                                                                                                                </p1:Convert.Result>
                                                                                                                <InArgument x:TypeArguments="sco:Collection(x:String)">
                                                                                                                  <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="listHrApprove" />
                                                                                                                </InArgument>
                                                                                                              </p1:Convert>
                                                                                                            </InArgument>
                                                                                                          </p1:CountCollection.Collection>
                                                                                                          <p1:CountCollection.Result>
                                                                                                            <OutArgument x:TypeArguments="x:Int32" />
                                                                                                          </p1:CountCollection.Result>
                                                                                                        </p1:CountCollection>
                                                                                                      </InArgument>
                                                                                                    </p1:Convert>
                                                                                                  </InArgument>
                                                                                                </p1:ConcatString>
                                                                                              </InArgument>
                                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="--Title in Send Task : " />
                                                                                            </p1:ConcatString>
                                                                                          </InArgument>
                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                                                          </InArgument>
                                                                                        </p1:ConcatString>
                                                                                      </InArgument>
                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="--LeaveStatus in Send Task : " />
                                                                                    </p1:ConcatString>
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveStatus" />
                                                                                  </InArgument>
                                                                                </p1:ConcatString>
                                                                              </InArgument>
                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="--LeaveType in Send Task : " />
                                                                            </p1:ConcatString>
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveType" />
                                                                          </InArgument>
                                                                        </p1:ConcatString>
                                                                      </p1:ExpressionContainerValue>
                                                                    </InArgument>
                                                                  </p:WriteToHistory.Message>
                                                                </p:WriteToHistory>
                                                                <p1:BuildCollection x:TypeArguments="x:String">
                                                                  <p1:BuildCollection.Result>
                                                                    <OutArgument x:TypeArguments="sco:Collection(x:String)">
                                                                      <p1:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="EmailToRequester">
                                                                        <p1:ExpressionContainerReference.Arguments>
                                                                          <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="EmailToRequester">
                                                                            <VariableReference x:TypeArguments="sco:Collection(x:String)">
                                                                              <VariableReference.Variable>
                                                                                <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID29" Name="EmailToRequester" />
                                                                              </VariableReference.Variable>
                                                                            </VariableReference>
                                                                          </InOutArgument>
                                                                        </p1:ExpressionContainerReference.Arguments>
                                                                        <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="EmailToRequester" />
                                                                      </p1:ExpressionContainerReference>
                                                                    </OutArgument>
                                                                  </p1:BuildCollection.Result>
                                                                  <p1:BuildCollection.Values>
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="RequesterId">
                                                                        <p1:ExpressionContainerValue.Arguments>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="RequesterId">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                                                                          </InArgument>
                                                                        </p1:ExpressionContainerValue.Arguments>
                                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequesterId" />
                                                                      </p1:ExpressionContainerValue>
                                                                    </InArgument>
                                                                  </p1:BuildCollection.Values>
                                                                </p1:BuildCollection>
                                                                <If>
                                                                  <If.Condition>
                                                                    <InArgument x:TypeArguments="x:Boolean">
                                                                      <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="!string.IsNullOrEmpty(OfficerManager)">
                                                                        <p1:ExpressionContainerValue.Arguments>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="OfficerManager">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                                                                          </InArgument>
                                                                        </p1:ExpressionContainerValue.Arguments>
                                                                        <p1:Not>
                                                                          <InArgument x:TypeArguments="x:Boolean">
                                                                            <p1:IsEmptyString>
                                                                              <InArgument x:TypeArguments="x:String">
                                                                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="OfficerManager" />
                                                                              </InArgument>
                                                                            </p1:IsEmptyString>
                                                                          </InArgument>
                                                                        </p1:Not>
                                                                      </p1:ExpressionContainerValue>
                                                                    </InArgument>
                                                                  </If.Condition>
                                                                  <If.Then>
                                                                    <Sequence>
                                                                      <Sequence.Variables>
                                                                        <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID22" Name="outcome_0" />
                                                                        <Variable x:TypeArguments="x:Int32" Name="outcome_1" />
                                                                      </Sequence.Variables>
                                                                      <p:WriteToHistory Message="Start send task" />
                                                                      <p:WriteToHistory>
                                                                        <p:WriteToHistory.Message>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="TitleManagerEmail">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="TitleManagerEmail">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="TitleManagerEmail" />
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:WriteToHistory.Message>
                                                                      </p:WriteToHistory>
                                                                      <p:WriteToHistory>
                                                                        <p:WriteToHistory.Message>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="BodyManagerEmail">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="BodyManagerEmail">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID21}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="BodyManagerEmail" />
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:WriteToHistory.Message>
                                                                      </p:WriteToHistory>
                                                                      <p:SingleTask DueDate="{x:Null}" TaskId="{x:Null}" TaskItemId="{x:Null}" CompletedStatus="Completed" ContentTypeId="0x0108003365C4474CAE8C42BCE396314E88E51F" DefaultTaskOutcome="0" OutcomeFieldName="TaskOutcome" OverdueEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have an &lt;/span&gt;&lt;span style='font-size:13.5pt;color:#ff3b3b;'&gt;overdue&lt;/span&gt;&lt;span style='font-size:13.5pt'&gt; task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" OverdueEmailSubject="Task Overdue" OverdueReminderRepeat="1" OverdueRepeatTimes="1" PreserveIncompleteTasks="False" SendReminderEmail="True" WaitForTaskCompletion="True" WaiveAssignmentEmail="False" WaiveCancelationEmail="False">
                                                                        <p:SingleTask.AssignedTo>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="OfficerManager">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="OfficerManager">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="OfficerManager" />
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:SingleTask.AssignedTo>
                                                                        <p:SingleTask.AssignmentEmailBody>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;&lt;table style='font-family:Angsana New;font-size:26px;'&gt;&lt;tr&gt;&lt;td&gt;&quot; +&#xA;  BodyManagerEmail + &quot;  &quot; + &quot;&lt;a href='&quot; + CurrentUrl + &quot;?SPHostUrl=&quot; + CurrentHostUrl + &quot;&amp;SPAppWebUrl=&quot; + CurrentAppUrl + &quot;&amp;CaseView=0&amp;CurItemId=&quot; + CurrentItemID + &quot;&amp;TaskUrl=%TaskSpecial: TaskUrl%'&gt;รายละเอียด&lt;/a&gt;&quot;+&#xA;&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="BodyManagerEmail">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID21}" />
                                                                                </InArgument>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="CurrentUrl">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                                                                                </InArgument>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="CurrentHostUrl">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                                                                                </InArgument>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="CurrentAppUrl">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                                                                                </InArgument>
                                                                                <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                                                                  <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <p1:ConcatString>
                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                  <p1:ConcatString>
                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                      <p1:ConcatString>
                                                                                        <p1:ConcatString.Result>
                                                                                          <OutArgument x:TypeArguments="x:String" />
                                                                                        </p1:ConcatString.Result>
                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                          <p1:ConcatString>
                                                                                            <p1:ConcatString.Result>
                                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                                            </p1:ConcatString.Result>
                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                              <p1:ConcatString>
                                                                                                <p1:ConcatString.Result>
                                                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                                                </p1:ConcatString.Result>
                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                  <p1:ConcatString>
                                                                                                    <p1:ConcatString.Result>
                                                                                                      <OutArgument x:TypeArguments="x:String" />
                                                                                                    </p1:ConcatString.Result>
                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                      <p1:ConcatString>
                                                                                                        <p1:ConcatString.Result>
                                                                                                          <OutArgument x:TypeArguments="x:String" />
                                                                                                        </p1:ConcatString.Result>
                                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                          <p1:ConcatString>
                                                                                                            <p1:ConcatString.Result>
                                                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                                                            </p1:ConcatString.Result>
                                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                              <p1:ConcatString>
                                                                                                                <p1:ConcatString.Result>
                                                                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                                                                </p1:ConcatString.Result>
                                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                  <p1:ConcatString>
                                                                                                                    <p1:ConcatString.Result>
                                                                                                                      <OutArgument x:TypeArguments="x:String" />
                                                                                                                    </p1:ConcatString.Result>
                                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                      <p1:ConcatString>
                                                                                                                        <p1:ConcatString.Result>
                                                                                                                          <OutArgument x:TypeArguments="x:String" />
                                                                                                                        </p1:ConcatString.Result>
                                                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                          <p1:ConcatString>
                                                                                                                            <p1:ConcatString.Result>
                                                                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                                                                            </p1:ConcatString.Result>
                                                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="&lt;table style='font-family:Angsana New;font-size:26px;'&gt;&lt;tr&gt;&lt;td&gt;" />
                                                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="BodyManagerEmail" />
                                                                                                                            </InArgument>
                                                                                                                          </p1:ConcatString>
                                                                                                                        </InArgument>
                                                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="  " />
                                                                                                                      </p1:ConcatString>
                                                                                                                    </InArgument>
                                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&lt;a href='" />
                                                                                                                  </p1:ConcatString>
                                                                                                                </InArgument>
                                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentUrl" />
                                                                                                                </InArgument>
                                                                                                              </p1:ConcatString>
                                                                                                            </InArgument>
                                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="?SPHostUrl=" />
                                                                                                          </p1:ConcatString>
                                                                                                        </InArgument>
                                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentHostUrl" />
                                                                                                        </InArgument>
                                                                                                      </p1:ConcatString>
                                                                                                    </InArgument>
                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&amp;SPAppWebUrl=" />
                                                                                                  </p1:ConcatString>
                                                                                                </InArgument>
                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentAppUrl" />
                                                                                                </InArgument>
                                                                                              </p1:ConcatString>
                                                                                            </InArgument>
                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&amp;CaseView=0&amp;CurItemId=" />
                                                                                          </p1:ConcatString>
                                                                                        </InArgument>
                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                          <p1:Convert x:TypeArguments="x:Int32, x:String">
                                                                                            <p1:Convert.Result>
                                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                                            </p1:Convert.Result>
                                                                                            <InArgument x:TypeArguments="x:Int32">
                                                                                              <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                                                                            </InArgument>
                                                                                          </p1:Convert>
                                                                                        </InArgument>
                                                                                      </p1:ConcatString>
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&amp;TaskUrl=%TaskSpecial: TaskUrl%'&gt;รายละเอียด&lt;/a&gt;" />
                                                                                  </p1:ConcatString>
                                                                                </InArgument>
                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" />
                                                                              </p1:ConcatString>
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:SingleTask.AssignmentEmailBody>
                                                                        <p:SingleTask.AssignmentEmailSubject>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="TitleManagerEmail">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="TitleManagerEmail">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="TitleManagerEmail" />
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:SingleTask.AssignmentEmailSubject>
                                                                        <p:SingleTask.Body>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="BodyManagerEmail">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="BodyManagerEmail">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID21}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="BodyManagerEmail" />
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:SingleTask.Body>
                                                                        <p:SingleTask.CancelationEmailBody>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;&lt;table style='font-family:Angsana New;font-size:26px;'&gt;&lt;tr&gt;&lt;td&gt;&quot; +&#xA;                &quot;เนื่องจากผู้ขออนุมัติได้ยกเลิกการขออนุมัติการลา จึงแจ้งมาเพื่อทราบ&quot;+&#xA;&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;" Expression="&lt;table style='font-family:Angsana New;font-size:26px;'&gt;&lt;tr&gt;&lt;td&gt;เนื่องจากผู้ขออนุมัติได้ยกเลิกการขออนุมัติการลา จึงแจ้งมาเพื่อทราบ&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" />
                                                                          </InArgument>
                                                                        </p:SingleTask.CancelationEmailBody>
                                                                        <p:SingleTask.CancelationEmailSubject>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;แจ้งยกเลิกการขออนุมัติการลาของ &quot; + Title">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <p1:ConcatString>
                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="แจ้งยกเลิกการขออนุมัติการลาของ " />
                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                                                </InArgument>
                                                                              </p1:ConcatString>
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:SingleTask.CancelationEmailSubject>
                                                                        <p:SingleTask.Outcome>
                                                                          <OutArgument x:TypeArguments="x:Int32">
                                                                            <p1:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="outcome_0">
                                                                              <p1:ExpressionContainerReference.Arguments>
                                                                                <InOutArgument x:TypeArguments="x:Int32" x:Key="outcome_0">
                                                                                  <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID22}" />
                                                                                </InOutArgument>
                                                                              </p1:ExpressionContainerReference.Arguments>
                                                                              <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="outcome_0" />
                                                                            </p1:ExpressionContainerReference>
                                                                          </OutArgument>
                                                                        </p:SingleTask.Outcome>
                                                                        <p:SingleTask.RelatedContentLinkListId>
                                                                          <InArgument x:TypeArguments="s:Guid">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="s:Guid">
                                                                              <p:GetCurrentListId />
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:SingleTask.RelatedContentLinkListId>
                                                                        <p:SingleTask.RelatedContentLinkListItemId>
                                                                          <InArgument x:TypeArguments="s:Guid">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="s:Guid">
                                                                              <p:GetCurrentItemGuid />
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:SingleTask.RelatedContentLinkListItemId>
                                                                        <p:SingleTask.RelatedContentLinkListItemIntegerId>
                                                                          <InArgument x:TypeArguments="x:Int32">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:Int32">
                                                                              <p:GetCurrentItemId />
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:SingleTask.RelatedContentLinkListItemIntegerId>
                                                                        <p:SingleTask.Title>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="TitleManagerEmail">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="TitleManagerEmail">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="TitleManagerEmail" />
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:SingleTask.Title>
                                                                      </p:SingleTask>
                                                                      <p:WriteToHistory>
                                                                        <p:WriteToHistory.Message>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Output :&quot; + outcome_0.ToString()">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:Object" x:Key="outcome_0">
                                                                                  <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID22}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <p1:ConcatString>
                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Output :" />
                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                  <p1:ToString>
                                                                                    <InArgument x:TypeArguments="x:Object">
                                                                                      <ArgumentValue x:TypeArguments="x:Object" ArgumentName="outcome_0" />
                                                                                    </InArgument>
                                                                                  </p1:ToString>
                                                                                </InArgument>
                                                                              </p1:ConcatString>
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </p:WriteToHistory.Message>
                                                                      </p:WriteToHistory>
                                                                      <Sequence DisplayName="Check Status of Task">
                                                                        <If>
                                                                          <If.Condition>
                                                                            <InArgument x:TypeArguments="x:Boolean">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="outcome_0 == 0">
                                                                                <p1:ExpressionContainerValue.Arguments>
                                                                                  <InArgument x:TypeArguments="x:Int32" x:Key="outcome_0">
                                                                                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID22}" />
                                                                                  </InArgument>
                                                                                </p1:ExpressionContainerValue.Arguments>
                                                                                <p1:IsEqual x:TypeArguments="x:Int32">
                                                                                  <p1:IsEqual.Left>
                                                                                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                                                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="outcome_0" />
                                                                                    </InArgument>
                                                                                  </p1:IsEqual.Left>
                                                                                  <p1:IsEqual.Right>
                                                                                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                                                                                  </p1:IsEqual.Right>
                                                                                </p1:IsEqual>
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </If.Condition>
                                                                          <If.Then>
                                                                            <Sequence>
                                                                              <If>
                                                                                <If.Condition>
                                                                                  <InArgument x:TypeArguments="x:Boolean">
                                                                                    <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestType.ToLower().Equals(&quot;new&quot;) || RequestType.ToLower().Equals(&quot;1&quot;)">
                                                                                      <p1:ExpressionContainerValue.Arguments>
                                                                                        <InArgument x:TypeArguments="x:String" x:Key="RequestType">
                                                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                                                                        </InArgument>
                                                                                        <InArgument x:TypeArguments="x:String" x:Key="RequestType1">
                                                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                                                                        </InArgument>
                                                                                      </p1:ExpressionContainerValue.Arguments>
                                                                                      <p1:Or>
                                                                                        <p1:Or.Left>
                                                                                          <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                                                                                            <p1:IsEqualString Pattern="{x:Null}" Text="new">
                                                                                              <p1:IsEqualString.Input>
                                                                                                <InArgument x:TypeArguments="x:String">
                                                                                                  <p1:ToLowerCase>
                                                                                                    <p1:ToLowerCase.Result>
                                                                                                      <OutArgument x:TypeArguments="x:String" />
                                                                                                    </p1:ToLowerCase.Result>
                                                                                                    <InArgument x:TypeArguments="x:String">
                                                                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType" />
                                                                                                    </InArgument>
                                                                                                  </p1:ToLowerCase>
                                                                                                </InArgument>
                                                                                              </p1:IsEqualString.Input>
                                                                                            </p1:IsEqualString>
                                                                                          </InArgument>
                                                                                        </p1:Or.Left>
                                                                                        <p1:Or.Right>
                                                                                          <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                                                                                            <p1:IsEqualString Pattern="{x:Null}" Text="1">
                                                                                              <p1:IsEqualString.Input>
                                                                                                <InArgument x:TypeArguments="x:String">
                                                                                                  <p1:ToLowerCase>
                                                                                                    <p1:ToLowerCase.Result>
                                                                                                      <OutArgument x:TypeArguments="x:String" />
                                                                                                    </p1:ToLowerCase.Result>
                                                                                                    <InArgument x:TypeArguments="x:String">
                                                                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType1" />
                                                                                                    </InArgument>
                                                                                                  </p1:ToLowerCase>
                                                                                                </InArgument>
                                                                                              </p1:IsEqualString.Input>
                                                                                            </p1:IsEqualString>
                                                                                          </InArgument>
                                                                                        </p1:Or.Right>
                                                                                      </p1:Or>
                                                                                    </p1:ExpressionContainerValue>
                                                                                  </InArgument>
                                                                                </If.Condition>
                                                                                <If.Then>
                                                                                  <Sequence>
                                                                                    <Assign>
                                                                                      <Assign.To>
                                                                                        <OutArgument x:TypeArguments="x:String">
                                                                                          <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                                            <p1:ExpressionContainerReference.Arguments>
                                                                                              <InOutArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                                <VariableReference x:TypeArguments="x:String">
                                                                                                  <VariableReference.Variable>
                                                                                                    <Variable x:TypeArguments="x:String" x:Name="__ReferenceID24" Name="setStatusRequest" />
                                                                                                  </VariableReference.Variable>
                                                                                                </VariableReference>
                                                                                              </InOutArgument>
                                                                                            </p1:ExpressionContainerReference.Arguments>
                                                                                            <ArgumentReference x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                                          </p1:ExpressionContainerReference>
                                                                                        </OutArgument>
                                                                                      </Assign.To>
                                                                                      <Assign.Value>
                                                                                        <InArgument x:TypeArguments="x:String">Approved</InArgument>
                                                                                      </Assign.Value>
                                                                                    </Assign>
                                                                                  </Sequence>
                                                                                </If.Then>
                                                                                <If.Else>
                                                                                  <Sequence>
                                                                                    <Assign>
                                                                                      <Assign.To>
                                                                                        <OutArgument x:TypeArguments="x:String">
                                                                                          <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                                            <p1:ExpressionContainerReference.Arguments>
                                                                                              <InOutArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                                              </InOutArgument>
                                                                                            </p1:ExpressionContainerReference.Arguments>
                                                                                            <ArgumentReference x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                                          </p1:ExpressionContainerReference>
                                                                                        </OutArgument>
                                                                                      </Assign.To>
                                                                                      <Assign.Value>
                                                                                        <InArgument x:TypeArguments="x:String">Cancelled</InArgument>
                                                                                      </Assign.Value>
                                                                                    </Assign>
                                                                                  </Sequence>
                                                                                </If.Else>
                                                                              </If>
                                                                              <Assign>
                                                                                <Assign.To>
                                                                                  <OutArgument x:TypeArguments="x:String">
                                                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="ApproveStatus">
                                                                                      <p1:ExpressionContainerReference.Arguments>
                                                                                        <InOutArgument x:TypeArguments="x:String" x:Key="ApproveStatus">
                                                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                                                                                        </InOutArgument>
                                                                                      </p1:ExpressionContainerReference.Arguments>
                                                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="ApproveStatus" />
                                                                                    </p1:ExpressionContainerReference>
                                                                                  </OutArgument>
                                                                                </Assign.To>
                                                                                <Assign.Value>
                                                                                  <InArgument x:TypeArguments="x:String">Approved</InArgument>
                                                                                </Assign.Value>
                                                                              </Assign>
                                                                            </Sequence>
                                                                          </If.Then>
                                                                          <If.Else>
                                                                            <Sequence>
                                                                              <Assign>
                                                                                <Assign.To>
                                                                                  <OutArgument x:TypeArguments="x:String">
                                                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                                      <p1:ExpressionContainerReference.Arguments>
                                                                                        <InOutArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                                        </InOutArgument>
                                                                                      </p1:ExpressionContainerReference.Arguments>
                                                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                                    </p1:ExpressionContainerReference>
                                                                                  </OutArgument>
                                                                                </Assign.To>
                                                                                <Assign.Value>
                                                                                  <InArgument x:TypeArguments="x:String">Rejected</InArgument>
                                                                                </Assign.Value>
                                                                              </Assign>
                                                                              <Assign>
                                                                                <Assign.To>
                                                                                  <OutArgument x:TypeArguments="x:String">
                                                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="ApproveStatus">
                                                                                      <p1:ExpressionContainerReference.Arguments>
                                                                                        <InOutArgument x:TypeArguments="x:String" x:Key="ApproveStatus">
                                                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                                                                                        </InOutArgument>
                                                                                      </p1:ExpressionContainerReference.Arguments>
                                                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="ApproveStatus" />
                                                                                    </p1:ExpressionContainerReference>
                                                                                  </OutArgument>
                                                                                </Assign.To>
                                                                                <Assign.Value>
                                                                                  <InArgument x:TypeArguments="x:String">Rejected</InArgument>
                                                                                </Assign.Value>
                                                                              </Assign>
                                                                            </Sequence>
                                                                          </If.Else>
                                                                        </If>
                                                                      </Sequence>
                                                                    </Sequence>
                                                                  </If.Then>
                                                                  <If.Else>
                                                                    <Sequence>
                                                                      <p:WriteToHistory Message="No Manager" />
                                                                      <If>
                                                                        <If.Condition>
                                                                          <InArgument x:TypeArguments="x:Boolean">
                                                                            <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestType.ToLower().Equals(&quot;new&quot;)">
                                                                              <p1:ExpressionContainerValue.Arguments>
                                                                                <InArgument x:TypeArguments="x:String" x:Key="RequestType">
                                                                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                                                                </InArgument>
                                                                              </p1:ExpressionContainerValue.Arguments>
                                                                              <p1:IsEqualString Pattern="{x:Null}" Text="new">
                                                                                <p1:IsEqualString.Input>
                                                                                  <InArgument x:TypeArguments="x:String">
                                                                                    <p1:ToLowerCase>
                                                                                      <InArgument x:TypeArguments="x:String">
                                                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType" />
                                                                                      </InArgument>
                                                                                    </p1:ToLowerCase>
                                                                                  </InArgument>
                                                                                </p1:IsEqualString.Input>
                                                                              </p1:IsEqualString>
                                                                            </p1:ExpressionContainerValue>
                                                                          </InArgument>
                                                                        </If.Condition>
                                                                        <If.Then>
                                                                          <Sequence>
                                                                            <Assign>
                                                                              <Assign.To>
                                                                                <OutArgument x:TypeArguments="x:String">
                                                                                  <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                                    <p1:ExpressionContainerReference.Arguments>
                                                                                      <InOutArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                                      </InOutArgument>
                                                                                    </p1:ExpressionContainerReference.Arguments>
                                                                                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                                  </p1:ExpressionContainerReference>
                                                                                </OutArgument>
                                                                              </Assign.To>
                                                                              <Assign.Value>
                                                                                <InArgument x:TypeArguments="x:String">Approved</InArgument>
                                                                              </Assign.Value>
                                                                            </Assign>
                                                                          </Sequence>
                                                                        </If.Then>
                                                                        <If.Else>
                                                                          <Sequence>
                                                                            <Assign>
                                                                              <Assign.To>
                                                                                <OutArgument x:TypeArguments="x:String">
                                                                                  <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                                    <p1:ExpressionContainerReference.Arguments>
                                                                                      <InOutArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                                      </InOutArgument>
                                                                                    </p1:ExpressionContainerReference.Arguments>
                                                                                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                                  </p1:ExpressionContainerReference>
                                                                                </OutArgument>
                                                                              </Assign.To>
                                                                              <Assign.Value>
                                                                                <InArgument x:TypeArguments="x:String">Cancelled</InArgument>
                                                                              </Assign.Value>
                                                                            </Assign>
                                                                          </Sequence>
                                                                        </If.Else>
                                                                      </If>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="ApproveStatus">
                                                                              <p1:ExpressionContainerReference.Arguments>
                                                                                <InOutArgument x:TypeArguments="x:String" x:Key="ApproveStatus">
                                                                                  <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                                                                                </InOutArgument>
                                                                              </p1:ExpressionContainerReference.Arguments>
                                                                              <ArgumentReference x:TypeArguments="x:String" ArgumentName="ApproveStatus" />
                                                                            </p1:ExpressionContainerReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="x:String">Approved</InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="x:String">
                                                                            <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="ExtraOwnApprove">
                                                                              <p1:ExpressionContainerReference.Arguments>
                                                                                <InOutArgument x:TypeArguments="x:String" x:Key="ExtraOwnApprove">
                                                                                  <VariableReference x:TypeArguments="x:String">
                                                                                    <VariableReference.Variable>
                                                                                      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID28" Name="ExtraOwnApprove" />
                                                                                    </VariableReference.Variable>
                                                                                  </VariableReference>
                                                                                </InOutArgument>
                                                                              </p1:ExpressionContainerReference.Arguments>
                                                                              <ArgumentReference x:TypeArguments="x:String" ArgumentName="ExtraOwnApprove" />
                                                                            </p1:ExpressionContainerReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="x:String">(อนุมัติด้วยตนเอง)</InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                    </Sequence>
                                                                  </If.Else>
                                                                </If>
                                                                <p:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}">
                                                                  <p:Email.Body>
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;&lt;table style='font-family:Angsana New;font-size:26px;'&gt;&lt;tr&gt;&lt;td&gt;&quot; +&#xA;                BodyRequesterEmail +ApproveStatus+ &quot; การขออนุมัติของท่าน &quot; + &quot;&lt;a href='&quot; + CurrentUrl + &quot;?SPHostUrl=&quot; + CurrentHostUrl + &quot;&amp;SPAppWebUrl=&quot; + CurrentAppUrl + &quot;&amp;CaseView=1&amp;CurItemId=&quot; + CurrentItemID + &quot;'&gt;รายละเอียด&lt;/a&gt;&quot;+&#xA;&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;">
                                                                        <p1:ExpressionContainerValue.Arguments>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="BodyRequesterEmail">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="ApproveStatus">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="CurrentUrl">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="CurrentHostUrl">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="CurrentAppUrl">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                                                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                                                          </InArgument>
                                                                        </p1:ExpressionContainerValue.Arguments>
                                                                        <p1:ConcatString>
                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                            <p1:ConcatString>
                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                <p1:ConcatString>
                                                                                  <p1:ConcatString.Result>
                                                                                    <OutArgument x:TypeArguments="x:String" />
                                                                                  </p1:ConcatString.Result>
                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                    <p1:ConcatString>
                                                                                      <p1:ConcatString.Result>
                                                                                        <OutArgument x:TypeArguments="x:String" />
                                                                                      </p1:ConcatString.Result>
                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                        <p1:ConcatString>
                                                                                          <p1:ConcatString.Result>
                                                                                            <OutArgument x:TypeArguments="x:String" />
                                                                                          </p1:ConcatString.Result>
                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                            <p1:ConcatString>
                                                                                              <p1:ConcatString.Result>
                                                                                                <OutArgument x:TypeArguments="x:String" />
                                                                                              </p1:ConcatString.Result>
                                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                <p1:ConcatString>
                                                                                                  <p1:ConcatString.Result>
                                                                                                    <OutArgument x:TypeArguments="x:String" />
                                                                                                  </p1:ConcatString.Result>
                                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                    <p1:ConcatString>
                                                                                                      <p1:ConcatString.Result>
                                                                                                        <OutArgument x:TypeArguments="x:String" />
                                                                                                      </p1:ConcatString.Result>
                                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                        <p1:ConcatString>
                                                                                                          <p1:ConcatString.Result>
                                                                                                            <OutArgument x:TypeArguments="x:String" />
                                                                                                          </p1:ConcatString.Result>
                                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                            <p1:ConcatString>
                                                                                                              <p1:ConcatString.Result>
                                                                                                                <OutArgument x:TypeArguments="x:String" />
                                                                                                              </p1:ConcatString.Result>
                                                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                <p1:ConcatString>
                                                                                                                  <p1:ConcatString.Result>
                                                                                                                    <OutArgument x:TypeArguments="x:String" />
                                                                                                                  </p1:ConcatString.Result>
                                                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                    <p1:ConcatString>
                                                                                                                      <p1:ConcatString.Result>
                                                                                                                        <OutArgument x:TypeArguments="x:String" />
                                                                                                                      </p1:ConcatString.Result>
                                                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                        <p1:ConcatString>
                                                                                                                          <p1:ConcatString.Result>
                                                                                                                            <OutArgument x:TypeArguments="x:String" />
                                                                                                                          </p1:ConcatString.Result>
                                                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="&lt;table style='font-family:Angsana New;font-size:26px;'&gt;&lt;tr&gt;&lt;td&gt;" />
                                                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="BodyRequesterEmail" />
                                                                                                                          </InArgument>
                                                                                                                        </p1:ConcatString>
                                                                                                                      </InArgument>
                                                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="ApproveStatus" />
                                                                                                                      </InArgument>
                                                                                                                    </p1:ConcatString>
                                                                                                                  </InArgument>
                                                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" การขออนุมัติของท่าน " />
                                                                                                                </p1:ConcatString>
                                                                                                              </InArgument>
                                                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&lt;a href='" />
                                                                                                            </p1:ConcatString>
                                                                                                          </InArgument>
                                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentUrl" />
                                                                                                          </InArgument>
                                                                                                        </p1:ConcatString>
                                                                                                      </InArgument>
                                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="?SPHostUrl=" />
                                                                                                    </p1:ConcatString>
                                                                                                  </InArgument>
                                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentHostUrl" />
                                                                                                  </InArgument>
                                                                                                </p1:ConcatString>
                                                                                              </InArgument>
                                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&amp;SPAppWebUrl=" />
                                                                                            </p1:ConcatString>
                                                                                          </InArgument>
                                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentAppUrl" />
                                                                                          </InArgument>
                                                                                        </p1:ConcatString>
                                                                                      </InArgument>
                                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&amp;CaseView=1&amp;CurItemId=" />
                                                                                    </p1:ConcatString>
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                    <p1:Convert x:TypeArguments="x:Int32, x:String">
                                                                                      <p1:Convert.Result>
                                                                                        <OutArgument x:TypeArguments="x:String" />
                                                                                      </p1:Convert.Result>
                                                                                      <InArgument x:TypeArguments="x:Int32">
                                                                                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                                                                      </InArgument>
                                                                                    </p1:Convert>
                                                                                  </InArgument>
                                                                                </p1:ConcatString>
                                                                              </InArgument>
                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="'&gt;รายละเอียด&lt;/a&gt;" />
                                                                            </p1:ConcatString>
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" />
                                                                        </p1:ConcatString>
                                                                      </p1:ExpressionContainerValue>
                                                                    </InArgument>
                                                                  </p:Email.Body>
                                                                  <p:Email.Subject>
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="TitleRequesterEmail+ExtraOwnApprove">
                                                                        <p1:ExpressionContainerValue.Arguments>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="TitleRequesterEmail">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" x:Key="ExtraOwnApprove">
                                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID28}" />
                                                                          </InArgument>
                                                                        </p1:ExpressionContainerValue.Arguments>
                                                                        <p1:ConcatString>
                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="TitleRequesterEmail" />
                                                                          </InArgument>
                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="ExtraOwnApprove" />
                                                                          </InArgument>
                                                                        </p1:ConcatString>
                                                                      </p1:ExpressionContainerValue>
                                                                    </InArgument>
                                                                  </p:Email.Subject>
                                                                  <p:Email.To>
                                                                    <InArgument x:TypeArguments="sco:Collection(x:String)">
                                                                      <p1:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="EmailToRequester">
                                                                        <p1:ExpressionContainerValue.Arguments>
                                                                          <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="EmailToRequester">
                                                                            <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID29}" />
                                                                          </InArgument>
                                                                        </p1:ExpressionContainerValue.Arguments>
                                                                        <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="EmailToRequester" />
                                                                      </p1:ExpressionContainerValue>
                                                                    </InArgument>
                                                                  </p:Email.To>
                                                                </p:Email>
                                                                <Assign>
                                                                  <Assign.To>
                                                                    <OutArgument x:TypeArguments="x:Boolean">
                                                                      <p1:ExpressionContainerReference x:TypeArguments="x:Boolean" DisplayName="iscompleteParallel">
                                                                        <p1:ExpressionContainerReference.Arguments>
                                                                          <InOutArgument x:TypeArguments="x:Boolean" x:Key="iscompleteParallel">
                                                                            <VariableReference x:TypeArguments="x:Boolean" Variable="{x:Reference __ReferenceID18}" />
                                                                          </InOutArgument>
                                                                        </p1:ExpressionContainerReference.Arguments>
                                                                        <ArgumentReference x:TypeArguments="x:Boolean" ArgumentName="iscompleteParallel" />
                                                                      </p1:ExpressionContainerReference>
                                                                    </OutArgument>
                                                                  </Assign.To>
                                                                  <Assign.Value>
                                                                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                                                  </Assign.Value>
                                                                </Assign>
                                                              </Sequence>
                                                            </p:AppOnlySequence.Body>
                                                          </p:AppOnlySequence>
                                                        </TryCatch.Try>
                                                        <TryCatch.Catches>
                                                          <Catch x:TypeArguments="s:Exception">
                                                            <ActivityAction x:TypeArguments="s:Exception">
                                                              <ActivityAction.Argument>
                                                                <DelegateInArgument x:TypeArguments="s:Exception" x:Name="__ReferenceID30" Name="exception" />
                                                              </ActivityAction.Argument>
                                                              <Sequence>
                                                                <p:WriteToHistory>
                                                                  <p:WriteToHistory.Message>
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Error In Send Task :&quot;+exception.ToString().Length">
                                                                        <p1:ExpressionContainerValue.Arguments>
                                                                          <InArgument x:TypeArguments="x:Object" x:Key="exception">
                                                                            <DelegateArgumentValue x:TypeArguments="x:Object">
                                                                              <x:Reference>__ReferenceID30</x:Reference>
                                                                            </DelegateArgumentValue>
                                                                          </InArgument>
                                                                        </p1:ExpressionContainerValue.Arguments>
                                                                        <p1:ConcatString>
                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Error In Send Task :" />
                                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                            <p1:Convert x:TypeArguments="x:Int32, x:String">
                                                                              <InArgument x:TypeArguments="x:Int32">
                                                                                <p1:StringLength>
                                                                                  <p1:StringLength.Result>
                                                                                    <OutArgument x:TypeArguments="x:Int32" />
                                                                                  </p1:StringLength.Result>
                                                                                  <InArgument x:TypeArguments="x:String">
                                                                                    <p1:ToString CultureName="{x:Null}" Format="{x:Null}">
                                                                                      <p1:ToString.Result>
                                                                                        <OutArgument x:TypeArguments="x:String" />
                                                                                      </p1:ToString.Result>
                                                                                      <InArgument x:TypeArguments="x:Object">
                                                                                        <ArgumentValue x:TypeArguments="x:Object" ArgumentName="exception" />
                                                                                      </InArgument>
                                                                                    </p1:ToString>
                                                                                  </InArgument>
                                                                                </p1:StringLength>
                                                                              </InArgument>
                                                                            </p1:Convert>
                                                                          </InArgument>
                                                                        </p1:ConcatString>
                                                                      </p1:ExpressionContainerValue>
                                                                    </InArgument>
                                                                  </p:WriteToHistory.Message>
                                                                </p:WriteToHistory>
                                                                <Assign>
                                                                  <Assign.To>
                                                                    <OutArgument x:TypeArguments="x:Int32">
                                                                      <p1:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="errorindex">
                                                                        <p1:ExpressionContainerReference.Arguments>
                                                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="errorindex">
                                                                            <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID31}" />
                                                                          </InOutArgument>
                                                                        </p1:ExpressionContainerReference.Arguments>
                                                                        <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="errorindex" />
                                                                      </p1:ExpressionContainerReference>
                                                                    </OutArgument>
                                                                  </Assign.To>
                                                                  <Assign.Value>
                                                                    <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                                                  </Assign.Value>
                                                                </Assign>
                                                                <Assign>
                                                                  <Assign.To>
                                                                    <OutArgument x:TypeArguments="x:Int32">
                                                                      <p1:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="errormax">
                                                                        <p1:ExpressionContainerReference.Arguments>
                                                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="errormax">
                                                                            <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                                                                          </InOutArgument>
                                                                        </p1:ExpressionContainerReference.Arguments>
                                                                        <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="errormax" />
                                                                      </p1:ExpressionContainerReference>
                                                                    </OutArgument>
                                                                  </Assign.To>
                                                                  <Assign.Value>
                                                                    <InArgument x:TypeArguments="x:Int32">240</InArgument>
                                                                  </Assign.Value>
                                                                </Assign>
                                                                <Assign>
                                                                  <Assign.To>
                                                                    <OutArgument x:TypeArguments="x:Int32">
                                                                      <p1:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="errorlen">
                                                                        <p1:ExpressionContainerReference.Arguments>
                                                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="errorlen">
                                                                            <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID33}" />
                                                                          </InOutArgument>
                                                                        </p1:ExpressionContainerReference.Arguments>
                                                                        <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="errorlen" />
                                                                      </p1:ExpressionContainerReference>
                                                                    </OutArgument>
                                                                  </Assign.To>
                                                                  <Assign.Value>
                                                                    <InArgument x:TypeArguments="x:Int32">
                                                                      <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="exception.ToString().Length">
                                                                        <p1:ExpressionContainerValue.Arguments>
                                                                          <InArgument x:TypeArguments="x:Object" x:Key="exception">
                                                                            <DelegateArgumentValue x:TypeArguments="x:Object">
                                                                              <x:Reference>__ReferenceID30</x:Reference>
                                                                            </DelegateArgumentValue>
                                                                          </InArgument>
                                                                        </p1:ExpressionContainerValue.Arguments>
                                                                        <p1:StringLength>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <p1:ToString>
                                                                              <InArgument x:TypeArguments="x:Object">
                                                                                <ArgumentValue x:TypeArguments="x:Object" ArgumentName="exception" />
                                                                              </InArgument>
                                                                            </p1:ToString>
                                                                          </InArgument>
                                                                        </p1:StringLength>
                                                                      </p1:ExpressionContainerValue>
                                                                    </InArgument>
                                                                  </Assign.Value>
                                                                </Assign>
                                                                <While>
                                                                  <While.Condition>
                                                                    <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="errorindex &lt; exception.ToString().Length;">
                                                                      <p1:ExpressionContainerValue.Arguments>
                                                                        <InArgument x:TypeArguments="x:Int32" x:Key="errorindex">
                                                                          <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID31}" />
                                                                        </InArgument>
                                                                        <InArgument x:TypeArguments="x:Object" x:Key="exception">
                                                                          <DelegateArgumentValue x:TypeArguments="x:Object">
                                                                            <x:Reference>__ReferenceID30</x:Reference>
                                                                          </DelegateArgumentValue>
                                                                        </InArgument>
                                                                      </p1:ExpressionContainerValue.Arguments>
                                                                      <p1:IsLessThan x:TypeArguments="x:Int32">
                                                                        <p1:IsLessThan.Left>
                                                                          <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                                            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errorindex" />
                                                                          </InArgument>
                                                                        </p1:IsLessThan.Left>
                                                                        <p1:IsLessThan.Right>
                                                                          <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1">
                                                                            <p1:StringLength>
                                                                              <InArgument x:TypeArguments="x:String">
                                                                                <p1:ToString CultureName="{x:Null}" Format="{x:Null}">
                                                                                  <p1:ToString.Result>
                                                                                    <OutArgument x:TypeArguments="x:String" />
                                                                                  </p1:ToString.Result>
                                                                                  <InArgument x:TypeArguments="x:Object">
                                                                                    <ArgumentValue x:TypeArguments="x:Object" ArgumentName="exception" />
                                                                                  </InArgument>
                                                                                </p1:ToString>
                                                                              </InArgument>
                                                                            </p1:StringLength>
                                                                          </InArgument>
                                                                        </p1:IsLessThan.Right>
                                                                      </p1:IsLessThan>
                                                                    </p1:ExpressionContainerValue>
                                                                  </While.Condition>
                                                                  <Sequence>
                                                                    <If>
                                                                      <If.Condition>
                                                                        <InArgument x:TypeArguments="x:Boolean">
                                                                          <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="(errorlen-errorindex) &gt; errormax">
                                                                            <p1:ExpressionContainerValue.Arguments>
                                                                              <InArgument x:TypeArguments="x:Int32" x:Key="errorlen">
                                                                                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID33}" />
                                                                              </InArgument>
                                                                              <InArgument x:TypeArguments="x:Int32" x:Key="errorindex">
                                                                                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID31}" />
                                                                              </InArgument>
                                                                              <InArgument x:TypeArguments="x:Int32" x:Key="errormax">
                                                                                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                                                                              </InArgument>
                                                                            </p1:ExpressionContainerValue.Arguments>
                                                                            <p1:IsGreaterThan x:TypeArguments="x:Int32">
                                                                              <p1:IsGreaterThan.Left>
                                                                                <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                                                  <p1:Subtract x:TypeArguments="x:Int32">
                                                                                    <p1:Subtract.Left>
                                                                                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                                                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errorlen" />
                                                                                      </InArgument>
                                                                                    </p1:Subtract.Left>
                                                                                    <p1:Subtract.Right>
                                                                                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1">
                                                                                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errorindex" />
                                                                                      </InArgument>
                                                                                    </p1:Subtract.Right>
                                                                                  </p1:Subtract>
                                                                                </InArgument>
                                                                              </p1:IsGreaterThan.Left>
                                                                              <p1:IsGreaterThan.Right>
                                                                                <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1">
                                                                                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errormax" />
                                                                                </InArgument>
                                                                              </p1:IsGreaterThan.Right>
                                                                            </p1:IsGreaterThan>
                                                                          </p1:ExpressionContainerValue>
                                                                        </InArgument>
                                                                      </If.Condition>
                                                                      <If.Then>
                                                                        <p:WriteToHistory>
                                                                          <p:WriteToHistory.Message>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="exception.ToString().Substring(errorindex,errormax)">
                                                                                <p1:ExpressionContainerValue.Arguments>
                                                                                  <InArgument x:TypeArguments="x:Int32" x:Key="errorindex">
                                                                                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID31}" />
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:Object" x:Key="exception">
                                                                                    <DelegateArgumentValue x:TypeArguments="x:Object">
                                                                                      <x:Reference>__ReferenceID30</x:Reference>
                                                                                    </DelegateArgumentValue>
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:Int32" x:Key="errormax">
                                                                                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                                                                                  </InArgument>
                                                                                </p1:ExpressionContainerValue.Arguments>
                                                                                <p1:Substring>
                                                                                  <p1:Substring.Input>
                                                                                    <InArgument x:TypeArguments="x:String">
                                                                                      <p1:ToString>
                                                                                        <InArgument x:TypeArguments="x:Object">
                                                                                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="exception" />
                                                                                        </InArgument>
                                                                                      </p1:ToString>
                                                                                    </InArgument>
                                                                                  </p1:Substring.Input>
                                                                                  <p1:Substring.StartIndex>
                                                                                    <InArgument x:TypeArguments="x:Int32">
                                                                                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errorindex" />
                                                                                    </InArgument>
                                                                                  </p1:Substring.StartIndex>
                                                                                  <p1:Substring.Length>
                                                                                    <InArgument x:TypeArguments="x:Int32">
                                                                                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errormax" />
                                                                                    </InArgument>
                                                                                  </p1:Substring.Length>
                                                                                </p1:Substring>
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </p:WriteToHistory.Message>
                                                                        </p:WriteToHistory>
                                                                      </If.Then>
                                                                      <If.Else>
                                                                        <p:WriteToHistory>
                                                                          <p:WriteToHistory.Message>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="exception.ToString().Substring(errorindex,(errorlen-errorindex))">
                                                                                <p1:ExpressionContainerValue.Arguments>
                                                                                  <InArgument x:TypeArguments="x:Int32" x:Key="errorindex">
                                                                                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID31}" />
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:Object" x:Key="exception">
                                                                                    <DelegateArgumentValue x:TypeArguments="x:Object">
                                                                                      <x:Reference>__ReferenceID30</x:Reference>
                                                                                    </DelegateArgumentValue>
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:Int32" x:Key="errorlen">
                                                                                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID33}" />
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:Int32" x:Key="errorindex1">
                                                                                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID31}" />
                                                                                  </InArgument>
                                                                                </p1:ExpressionContainerValue.Arguments>
                                                                                <p1:Substring>
                                                                                  <p1:Substring.Input>
                                                                                    <InArgument x:TypeArguments="x:String">
                                                                                      <p1:ToString>
                                                                                        <InArgument x:TypeArguments="x:Object">
                                                                                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="exception" />
                                                                                        </InArgument>
                                                                                      </p1:ToString>
                                                                                    </InArgument>
                                                                                  </p1:Substring.Input>
                                                                                  <p1:Substring.StartIndex>
                                                                                    <InArgument x:TypeArguments="x:Int32">
                                                                                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errorindex" />
                                                                                    </InArgument>
                                                                                  </p1:Substring.StartIndex>
                                                                                  <p1:Substring.Length>
                                                                                    <InArgument x:TypeArguments="x:Int32">
                                                                                      <p1:Subtract x:TypeArguments="x:Int32">
                                                                                        <p1:Subtract.Left>
                                                                                          <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                                                            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errorlen" />
                                                                                          </InArgument>
                                                                                        </p1:Subtract.Left>
                                                                                        <p1:Subtract.Right>
                                                                                          <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1">
                                                                                            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errorindex1" />
                                                                                          </InArgument>
                                                                                        </p1:Subtract.Right>
                                                                                      </p1:Subtract>
                                                                                    </InArgument>
                                                                                  </p1:Substring.Length>
                                                                                </p1:Substring>
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </p:WriteToHistory.Message>
                                                                        </p:WriteToHistory>
                                                                      </If.Else>
                                                                    </If>
                                                                    <Assign>
                                                                      <Assign.To>
                                                                        <OutArgument x:TypeArguments="x:Int32">
                                                                          <p1:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="errorindex">
                                                                            <p1:ExpressionContainerReference.Arguments>
                                                                              <InOutArgument x:TypeArguments="x:Int32" x:Key="errorindex">
                                                                                <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID31}" />
                                                                              </InOutArgument>
                                                                            </p1:ExpressionContainerReference.Arguments>
                                                                            <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="errorindex" />
                                                                          </p1:ExpressionContainerReference>
                                                                        </OutArgument>
                                                                      </Assign.To>
                                                                      <Assign.Value>
                                                                        <InArgument x:TypeArguments="x:Int32">
                                                                          <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="errorindex+errormax">
                                                                            <p1:ExpressionContainerValue.Arguments>
                                                                              <InArgument x:TypeArguments="x:Int32" x:Key="errorindex">
                                                                                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID31}" />
                                                                              </InArgument>
                                                                              <InArgument x:TypeArguments="x:Int32" x:Key="errormax">
                                                                                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                                                                              </InArgument>
                                                                            </p1:ExpressionContainerValue.Arguments>
                                                                            <p1:Add x:TypeArguments="x:Int32">
                                                                              <p1:Add.Left>
                                                                                <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                                                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errorindex" />
                                                                                </InArgument>
                                                                              </p1:Add.Left>
                                                                              <p1:Add.Right>
                                                                                <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1">
                                                                                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="errormax" />
                                                                                </InArgument>
                                                                              </p1:Add.Right>
                                                                            </p1:Add>
                                                                          </p1:ExpressionContainerValue>
                                                                        </InArgument>
                                                                      </Assign.Value>
                                                                    </Assign>
                                                                  </Sequence>
                                                                </While>
                                                                <p1:SetUserStatus Description="Terminate" />
                                                                <TerminateWorkflow Reason="Terminate because error" />
                                                              </Sequence>
                                                            </ActivityAction>
                                                          </Catch>
                                                        </TryCatch.Catches>
                                                      </TryCatch>
                                                      <p:AppOnlySequence>
                                                        <p:AppOnlySequence.Body>
                                                          <Sequence>
                                                            <p:WaitForFieldChange EventPayload="{x:Null}" ItemGuid="{x:Null}" FieldName="CancelWorkflow" FieldValue="true">
                                                              <p:WaitForFieldChange.ItemId>
                                                                <InArgument x:TypeArguments="x:Int32">
                                                                  <p1:ExpressionContainerValue x:TypeArguments="x:Int32">
                                                                    <p:GetCurrentItemId />
                                                                  </p1:ExpressionContainerValue>
                                                                </InArgument>
                                                              </p:WaitForFieldChange.ItemId>
                                                              <p:WaitForFieldChange.ListId>
                                                                <InArgument x:TypeArguments="s:Guid">
                                                                  <p1:ExpressionContainerValue x:TypeArguments="s:Guid">
                                                                    <p:GetCurrentListId />
                                                                  </p1:ExpressionContainerValue>
                                                                </InArgument>
                                                              </p:WaitForFieldChange.ListId>
                                                            </p:WaitForFieldChange>
                                                            <p:WriteToHistory Message="Starting Teminate" />
                                                            <Assign>
                                                              <Assign.To>
                                                                <OutArgument x:TypeArguments="x:Int32">
                                                                  <p1:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="iscancelstate">
                                                                    <p1:ExpressionContainerReference.Arguments>
                                                                      <InOutArgument x:TypeArguments="x:Int32" x:Key="iscancelstate">
                                                                        <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID34}" />
                                                                      </InOutArgument>
                                                                    </p1:ExpressionContainerReference.Arguments>
                                                                    <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="iscancelstate" />
                                                                  </p1:ExpressionContainerReference>
                                                                </OutArgument>
                                                              </Assign.To>
                                                              <Assign.Value>
                                                                <InArgument x:TypeArguments="x:Int32">1</InArgument>
                                                              </Assign.Value>
                                                            </Assign>
                                                            <Assign>
                                                              <Assign.To>
                                                                <OutArgument x:TypeArguments="x:Boolean">
                                                                  <p1:ExpressionContainerReference x:TypeArguments="x:Boolean" DisplayName="iscompleteParallel">
                                                                    <p1:ExpressionContainerReference.Arguments>
                                                                      <InOutArgument x:TypeArguments="x:Boolean" x:Key="iscompleteParallel">
                                                                        <VariableReference x:TypeArguments="x:Boolean" Variable="{x:Reference __ReferenceID18}" />
                                                                      </InOutArgument>
                                                                    </p1:ExpressionContainerReference.Arguments>
                                                                    <ArgumentReference x:TypeArguments="x:Boolean" ArgumentName="iscompleteParallel" />
                                                                  </p1:ExpressionContainerReference>
                                                                </OutArgument>
                                                              </Assign.To>
                                                              <Assign.Value>
                                                                <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                                              </Assign.Value>
                                                            </Assign>
                                                          </Sequence>
                                                        </p:AppOnlySequence.Body>
                                                      </p:AppOnlySequence>
                                                    </Parallel>
                                                  </Sequence>
                                                </State.Entry>
                                                <State.Transitions>
                                                  <Transition DisplayName="T4">
                                                    <Transition.Condition>
                                                      <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="(RequestType.ToLower().Equals(&quot;new&quot;) || RequestType.ToLower().Equals(&quot;1&quot;)) &amp;&amp; iscancelstate == 0">
                                                        <p1:ExpressionContainerValue.Arguments>
                                                          <InArgument x:TypeArguments="x:String" x:Key="RequestType">
                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                                          </InArgument>
                                                          <InArgument x:TypeArguments="x:String" x:Key="RequestType1">
                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                                          </InArgument>
                                                          <InArgument x:TypeArguments="x:Int32" x:Key="iscancelstate">
                                                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID34}" />
                                                          </InArgument>
                                                        </p1:ExpressionContainerValue.Arguments>
                                                        <p1:And>
                                                          <p1:And.Left>
                                                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                                                              <p1:Or>
                                                                <p1:Or.Left>
                                                                  <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                                                                    <p1:IsEqualString Pattern="{x:Null}" Text="new">
                                                                      <p1:IsEqualString.Input>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <p1:ToLowerCase>
                                                                            <p1:ToLowerCase.Result>
                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                            </p1:ToLowerCase.Result>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType" />
                                                                            </InArgument>
                                                                          </p1:ToLowerCase>
                                                                        </InArgument>
                                                                      </p1:IsEqualString.Input>
                                                                      <p1:IsEqualString.Result>
                                                                        <OutArgument x:TypeArguments="x:Boolean" />
                                                                      </p1:IsEqualString.Result>
                                                                    </p1:IsEqualString>
                                                                  </InArgument>
                                                                </p1:Or.Left>
                                                                <p1:Or.Right>
                                                                  <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                                                                    <p1:IsEqualString Pattern="{x:Null}" Text="1">
                                                                      <p1:IsEqualString.Input>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <p1:ToLowerCase>
                                                                            <p1:ToLowerCase.Result>
                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                            </p1:ToLowerCase.Result>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType1" />
                                                                            </InArgument>
                                                                          </p1:ToLowerCase>
                                                                        </InArgument>
                                                                      </p1:IsEqualString.Input>
                                                                      <p1:IsEqualString.Result>
                                                                        <OutArgument x:TypeArguments="x:Boolean" />
                                                                      </p1:IsEqualString.Result>
                                                                    </p1:IsEqualString>
                                                                  </InArgument>
                                                                </p1:Or.Right>
                                                              </p1:Or>
                                                            </InArgument>
                                                          </p1:And.Left>
                                                          <p1:And.Right>
                                                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                                                              <p1:IsEqual x:TypeArguments="x:Int32">
                                                                <p1:IsEqual.Left>
                                                                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="iscancelstate" />
                                                                  </InArgument>
                                                                </p1:IsEqual.Left>
                                                                <p1:IsEqual.Right>
                                                                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                                                                </p1:IsEqual.Right>
                                                              </p1:IsEqual>
                                                            </InArgument>
                                                          </p1:And.Right>
                                                        </p1:And>
                                                      </p1:ExpressionContainerValue>
                                                    </Transition.Condition>
                                                    <Transition.To>
                                                      <State x:Name="__ReferenceID48" DisplayName="Set Status (New)">
                                                        <State.Entry>
                                                          <Sequence>
                                                            <p:AppOnlySequence>
                                                              <p:AppOnlySequence.Body>
                                                                <Sequence>
                                                                  <p:WriteToHistory>
                                                                    <p:WriteToHistory.Message>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Set Status to : &quot;+setStatusRequest">
                                                                          <p1:ExpressionContainerValue.Arguments>
                                                                            <InArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                            </InArgument>
                                                                          </p1:ExpressionContainerValue.Arguments>
                                                                          <p1:ConcatString>
                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Set Status to : " />
                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                            </InArgument>
                                                                          </p1:ConcatString>
                                                                        </p1:ExpressionContainerValue>
                                                                      </InArgument>
                                                                    </p:WriteToHistory.Message>
                                                                  </p:WriteToHistory>
                                                                  <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                                                    <p:UpdateListItem.ItemId>
                                                                      <InArgument x:TypeArguments="x:Int32">
                                                                        <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="CurrentItemID">
                                                                          <p1:ExpressionContainerValue.Arguments>
                                                                            <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                                                              <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                                                            </InArgument>
                                                                          </p1:ExpressionContainerValue.Arguments>
                                                                          <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                                                        </p1:ExpressionContainerValue>
                                                                      </InArgument>
                                                                    </p:UpdateListItem.ItemId>
                                                                    <p:UpdateListItem.ListId>
                                                                      <InArgument x:TypeArguments="s:Guid">
                                                                        <p1:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="CurrentListGUID">
                                                                          <p1:ExpressionContainerValue.Arguments>
                                                                            <InArgument x:TypeArguments="s:Guid" x:Key="CurrentListGUID">
                                                                              <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID3}" />
                                                                            </InArgument>
                                                                          </p1:ExpressionContainerValue.Arguments>
                                                                          <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="CurrentListGUID" />
                                                                        </p1:ExpressionContainerValue>
                                                                      </InArgument>
                                                                    </p:UpdateListItem.ListId>
                                                                    <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                      <InArgument x:TypeArguments="p1:DynamicValue">
                                                                        <p1:SetDynamicValueProperties>
                                                                          <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                                                            <InArgument x:TypeArguments="x:String" x:Key="LeaveStatus">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                                <p1:ExpressionContainerValue.Arguments>
                                                                                  <InArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                                  </InArgument>
                                                                                </p1:ExpressionContainerValue.Arguments>
                                                                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </scg:Dictionary>
                                                                        </p1:SetDynamicValueProperties>
                                                                      </InArgument>
                                                                    </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                  </p:UpdateListItem>
                                                                  <p1:SetUserStatus DisplayName="Set In Progress">
                                                                    <p1:SetUserStatus.Description>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                          <p1:ExpressionContainerValue.Arguments>
                                                                            <InArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                            </InArgument>
                                                                          </p1:ExpressionContainerValue.Arguments>
                                                                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                        </p1:ExpressionContainerValue>
                                                                      </InArgument>
                                                                    </p1:SetUserStatus.Description>
                                                                  </p1:SetUserStatus>
                                                                </Sequence>
                                                              </p:AppOnlySequence.Body>
                                                            </p:AppOnlySequence>
                                                          </Sequence>
                                                        </State.Entry>
                                                        <State.Transitions>
                                                          <Transition DisplayName="T13">
                                                            <Transition.To>
                                                              <State x:Name="__ReferenceID37" DisplayName="HR Review">
                                                                <State.Entry>
                                                                  <Sequence DisplayName="HR Review">
                                                                    <If>
                                                                      <If.Condition>
                                                                        <InArgument x:TypeArguments="x:Boolean">
                                                                          <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="listHrApprove.Count &gt; 0 &amp;&amp; ApproveStatus.Equals(&quot;Approved&quot;)">
                                                                            <p1:ExpressionContainerValue.Arguments>
                                                                              <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="listHrApprove">
                                                                                <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID12}" />
                                                                              </InArgument>
                                                                              <InArgument x:TypeArguments="x:String" x:Key="ApproveStatus">
                                                                                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                                                                              </InArgument>
                                                                            </p1:ExpressionContainerValue.Arguments>
                                                                            <p1:And>
                                                                              <p1:And.Left>
                                                                                <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                                                                                  <p1:IsGreaterThan x:TypeArguments="x:Int32">
                                                                                    <p1:IsGreaterThan.Left>
                                                                                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                                                        <p1:CountCollection x:TypeArguments="x:String">
                                                                                          <p1:CountCollection.Collection>
                                                                                            <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                                              <p1:Convert x:TypeArguments="sco:Collection(x:String), scg:ICollection(x:String)">
                                                                                                <p1:Convert.Result>
                                                                                                  <OutArgument x:TypeArguments="scg:ICollection(x:String)" />
                                                                                                </p1:Convert.Result>
                                                                                                <InArgument x:TypeArguments="sco:Collection(x:String)">
                                                                                                  <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="listHrApprove" />
                                                                                                </InArgument>
                                                                                              </p1:Convert>
                                                                                            </InArgument>
                                                                                          </p1:CountCollection.Collection>
                                                                                          <p1:CountCollection.Result>
                                                                                            <OutArgument x:TypeArguments="x:Int32" />
                                                                                          </p1:CountCollection.Result>
                                                                                        </p1:CountCollection>
                                                                                      </InArgument>
                                                                                    </p1:IsGreaterThan.Left>
                                                                                    <p1:IsGreaterThan.Right>
                                                                                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                                                                                    </p1:IsGreaterThan.Right>
                                                                                  </p1:IsGreaterThan>
                                                                                </InArgument>
                                                                              </p1:And.Left>
                                                                              <p1:And.Right>
                                                                                <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                                                                                  <p1:IsEqualString Pattern="{x:Null}" Text="Approved">
                                                                                    <p1:IsEqualString.Input>
                                                                                      <InArgument x:TypeArguments="x:String">
                                                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="ApproveStatus" />
                                                                                      </InArgument>
                                                                                    </p1:IsEqualString.Input>
                                                                                  </p1:IsEqualString>
                                                                                </InArgument>
                                                                              </p1:And.Right>
                                                                            </p1:And>
                                                                          </p1:ExpressionContainerValue>
                                                                        </InArgument>
                                                                      </If.Condition>
                                                                      <If.Then>
                                                                        <Sequence>
                                                                          <Sequence.Variables>
                                                                            <Variable x:TypeArguments="x:Int32" Name="outcom_hr" />
                                                                          </Sequence.Variables>
                                                                          <p:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}">
                                                                            <p:Email.Body>
                                                                              <InArgument x:TypeArguments="x:String">
                                                                                <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;&lt;table style='font-family:Angsana New;font-size:26px;'&gt;&lt;tr&gt;&lt;td&gt;&quot; +&#xA;                BodyHrEmail + ApproveStatus + &quot;  &quot; + &quot;&lt;a href='&quot; + CurrentUrl + &quot;?SPHostUrl=&quot; + CurrentHostUrl + &quot;&amp;SPAppWebUrl=&quot; + CurrentAppUrl + &quot;&amp;CaseView=2&amp;CurItemId=&quot; + CurrentItemID + &quot;'&gt;รายละเอียด&lt;/a&gt;&quot;+&#xA;&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;">
                                                                                  <p1:ExpressionContainerValue.Arguments>
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="BodyHrEmail">
                                                                                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID35}" />
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="ApproveStatus">
                                                                                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="CurrentUrl">
                                                                                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="CurrentHostUrl">
                                                                                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="CurrentAppUrl">
                                                                                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                                                                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                                                                    </InArgument>
                                                                                  </p1:ExpressionContainerValue.Arguments>
                                                                                  <p1:ConcatString>
                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                      <p1:ConcatString>
                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                          <p1:ConcatString>
                                                                                            <p1:ConcatString.Result>
                                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                                            </p1:ConcatString.Result>
                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                              <p1:ConcatString>
                                                                                                <p1:ConcatString.Result>
                                                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                                                </p1:ConcatString.Result>
                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                  <p1:ConcatString>
                                                                                                    <p1:ConcatString.Result>
                                                                                                      <OutArgument x:TypeArguments="x:String" />
                                                                                                    </p1:ConcatString.Result>
                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                      <p1:ConcatString>
                                                                                                        <p1:ConcatString.Result>
                                                                                                          <OutArgument x:TypeArguments="x:String" />
                                                                                                        </p1:ConcatString.Result>
                                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                          <p1:ConcatString>
                                                                                                            <p1:ConcatString.Result>
                                                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                                                            </p1:ConcatString.Result>
                                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                              <p1:ConcatString>
                                                                                                                <p1:ConcatString.Result>
                                                                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                                                                </p1:ConcatString.Result>
                                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                  <p1:ConcatString>
                                                                                                                    <p1:ConcatString.Result>
                                                                                                                      <OutArgument x:TypeArguments="x:String" />
                                                                                                                    </p1:ConcatString.Result>
                                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                      <p1:ConcatString>
                                                                                                                        <p1:ConcatString.Result>
                                                                                                                          <OutArgument x:TypeArguments="x:String" />
                                                                                                                        </p1:ConcatString.Result>
                                                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                          <p1:ConcatString>
                                                                                                                            <p1:ConcatString.Result>
                                                                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                                                                            </p1:ConcatString.Result>
                                                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                              <p1:ConcatString>
                                                                                                                                <p1:ConcatString.Result>
                                                                                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                                                                                </p1:ConcatString.Result>
                                                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                                                                                  <p1:ConcatString>
                                                                                                                                    <p1:ConcatString.Result>
                                                                                                                                      <OutArgument x:TypeArguments="x:String" />
                                                                                                                                    </p1:ConcatString.Result>
                                                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="&lt;table style='font-family:Angsana New;font-size:26px;'&gt;&lt;tr&gt;&lt;td&gt;" />
                                                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="BodyHrEmail" />
                                                                                                                                    </InArgument>
                                                                                                                                  </p1:ConcatString>
                                                                                                                                </InArgument>
                                                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                                                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="ApproveStatus" />
                                                                                                                                </InArgument>
                                                                                                                              </p1:ConcatString>
                                                                                                                            </InArgument>
                                                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="  " />
                                                                                                                          </p1:ConcatString>
                                                                                                                        </InArgument>
                                                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&lt;a href='" />
                                                                                                                      </p1:ConcatString>
                                                                                                                    </InArgument>
                                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentUrl" />
                                                                                                                    </InArgument>
                                                                                                                  </p1:ConcatString>
                                                                                                                </InArgument>
                                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="?SPHostUrl=" />
                                                                                                              </p1:ConcatString>
                                                                                                            </InArgument>
                                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentHostUrl" />
                                                                                                            </InArgument>
                                                                                                          </p1:ConcatString>
                                                                                                        </InArgument>
                                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&amp;SPAppWebUrl=" />
                                                                                                      </p1:ConcatString>
                                                                                                    </InArgument>
                                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="CurrentAppUrl" />
                                                                                                    </InArgument>
                                                                                                  </p1:ConcatString>
                                                                                                </InArgument>
                                                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&amp;CaseView=2&amp;CurItemId=" />
                                                                                              </p1:ConcatString>
                                                                                            </InArgument>
                                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                              <p1:Convert x:TypeArguments="x:Int32, x:String">
                                                                                                <p1:Convert.Result>
                                                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                                                </p1:Convert.Result>
                                                                                                <InArgument x:TypeArguments="x:Int32">
                                                                                                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                                                                                </InArgument>
                                                                                              </p1:Convert>
                                                                                            </InArgument>
                                                                                          </p1:ConcatString>
                                                                                        </InArgument>
                                                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="'&gt;รายละเอียด&lt;/a&gt;" />
                                                                                      </p1:ConcatString>
                                                                                    </InArgument>
                                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" />
                                                                                  </p1:ConcatString>
                                                                                </p1:ExpressionContainerValue>
                                                                              </InArgument>
                                                                            </p:Email.Body>
                                                                            <p:Email.Subject>
                                                                              <InArgument x:TypeArguments="x:String">
                                                                                <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="TitleHREmail">
                                                                                  <p1:ExpressionContainerValue.Arguments>
                                                                                    <InArgument x:TypeArguments="x:String" x:Key="TitleHREmail">
                                                                                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID36}" />
                                                                                    </InArgument>
                                                                                  </p1:ExpressionContainerValue.Arguments>
                                                                                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="TitleHREmail" />
                                                                                </p1:ExpressionContainerValue>
                                                                              </InArgument>
                                                                            </p:Email.Subject>
                                                                            <p:Email.To>
                                                                              <InArgument x:TypeArguments="sco:Collection(x:String)">
                                                                                <p1:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="listHrApprove">
                                                                                  <p1:ExpressionContainerValue.Arguments>
                                                                                    <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="listHrApprove">
                                                                                      <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID12}" />
                                                                                    </InArgument>
                                                                                  </p1:ExpressionContainerValue.Arguments>
                                                                                  <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="listHrApprove" />
                                                                                </p1:ExpressionContainerValue>
                                                                              </InArgument>
                                                                            </p:Email.To>
                                                                          </p:Email>
                                                                          <p:WriteToHistory Message="Hr Reviewed" />
                                                                        </Sequence>
                                                                      </If.Then>
                                                                      <If.Else>
                                                                        <p:WriteToHistory Message="No Hr" />
                                                                      </If.Else>
                                                                    </If>
                                                                  </Sequence>
                                                                </State.Entry>
                                                                <State.Transitions>
                                                                  <Transition DisplayName="T8">
                                                                    <Transition.To>
                                                                      <State x:Name="__ReferenceID38" DisplayName="FinalState" IsFinal="True" />
                                                                    </Transition.To>
                                                                  </Transition>
                                                                </State.Transitions>
                                                              </State>
                                                            </Transition.To>
                                                          </Transition>
                                                        </State.Transitions>
                                                      </State>
                                                    </Transition.To>
                                                  </Transition>
                                                  <Transition DisplayName="T12">
                                                    <Transition.Condition>
                                                      <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="(RequestType.ToLower().Equals(&quot;cancel&quot;) || RequestType.ToLower().Equals(&quot;2&quot;) )&amp;&amp; iscancelstate == 0">
                                                        <p1:ExpressionContainerValue.Arguments>
                                                          <InArgument x:TypeArguments="x:String" x:Key="RequestType">
                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                                          </InArgument>
                                                          <InArgument x:TypeArguments="x:String" x:Key="RequestType1">
                                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                                          </InArgument>
                                                          <InArgument x:TypeArguments="x:Int32" x:Key="iscancelstate">
                                                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID34}" />
                                                          </InArgument>
                                                        </p1:ExpressionContainerValue.Arguments>
                                                        <p1:And>
                                                          <p1:And.Left>
                                                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                                                              <p1:Or>
                                                                <p1:Or.Left>
                                                                  <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                                                                    <p1:IsEqualString Pattern="{x:Null}" Text="cancel">
                                                                      <p1:IsEqualString.Input>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <p1:ToLowerCase>
                                                                            <p1:ToLowerCase.Result>
                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                            </p1:ToLowerCase.Result>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType" />
                                                                            </InArgument>
                                                                          </p1:ToLowerCase>
                                                                        </InArgument>
                                                                      </p1:IsEqualString.Input>
                                                                      <p1:IsEqualString.Result>
                                                                        <OutArgument x:TypeArguments="x:Boolean" />
                                                                      </p1:IsEqualString.Result>
                                                                    </p1:IsEqualString>
                                                                  </InArgument>
                                                                </p1:Or.Left>
                                                                <p1:Or.Right>
                                                                  <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                                                                    <p1:IsEqualString Pattern="{x:Null}" Text="2">
                                                                      <p1:IsEqualString.Input>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <p1:ToLowerCase>
                                                                            <p1:ToLowerCase.Result>
                                                                              <OutArgument x:TypeArguments="x:String" />
                                                                            </p1:ToLowerCase.Result>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType1" />
                                                                            </InArgument>
                                                                          </p1:ToLowerCase>
                                                                        </InArgument>
                                                                      </p1:IsEqualString.Input>
                                                                      <p1:IsEqualString.Result>
                                                                        <OutArgument x:TypeArguments="x:Boolean" />
                                                                      </p1:IsEqualString.Result>
                                                                    </p1:IsEqualString>
                                                                  </InArgument>
                                                                </p1:Or.Right>
                                                              </p1:Or>
                                                            </InArgument>
                                                          </p1:And.Left>
                                                          <p1:And.Right>
                                                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                                                              <p1:IsEqual x:TypeArguments="x:Int32">
                                                                <p1:IsEqual.Left>
                                                                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="iscancelstate" />
                                                                  </InArgument>
                                                                </p1:IsEqual.Left>
                                                                <p1:IsEqual.Right>
                                                                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                                                                </p1:IsEqual.Right>
                                                              </p1:IsEqual>
                                                            </InArgument>
                                                          </p1:And.Right>
                                                        </p1:And>
                                                      </p1:ExpressionContainerValue>
                                                    </Transition.Condition>
                                                    <Transition.To>
                                                      <State x:Name="__ReferenceID47" DisplayName="Set Status (Cancel)">
                                                        <State.Entry>
                                                          <Sequence>
                                                            <p:AppOnlySequence>
                                                              <p:AppOnlySequence.Body>
                                                                <Sequence>
                                                                  <p:WriteToHistory>
                                                                    <p:WriteToHistory.Message>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Set Status to : &quot;+setStatusRequest">
                                                                          <p1:ExpressionContainerValue.Arguments>
                                                                            <InArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                            </InArgument>
                                                                          </p1:ExpressionContainerValue.Arguments>
                                                                          <p1:ConcatString>
                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Set Status to : " />
                                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                            </InArgument>
                                                                          </p1:ConcatString>
                                                                        </p1:ExpressionContainerValue>
                                                                      </InArgument>
                                                                    </p:WriteToHistory.Message>
                                                                  </p:WriteToHistory>
                                                                  <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                                                    <p:UpdateListItem.ItemId>
                                                                      <InArgument x:TypeArguments="x:Int32">
                                                                        <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="CurrentItemID">
                                                                          <p1:ExpressionContainerValue.Arguments>
                                                                            <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                                                              <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                                                            </InArgument>
                                                                          </p1:ExpressionContainerValue.Arguments>
                                                                          <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                                                        </p1:ExpressionContainerValue>
                                                                      </InArgument>
                                                                    </p:UpdateListItem.ItemId>
                                                                    <p:UpdateListItem.ListId>
                                                                      <InArgument x:TypeArguments="s:Guid">
                                                                        <p1:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="CurrentListGUID">
                                                                          <p1:ExpressionContainerValue.Arguments>
                                                                            <InArgument x:TypeArguments="s:Guid" x:Key="CurrentListGUID">
                                                                              <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID3}" />
                                                                            </InArgument>
                                                                          </p1:ExpressionContainerValue.Arguments>
                                                                          <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="CurrentListGUID" />
                                                                        </p1:ExpressionContainerValue>
                                                                      </InArgument>
                                                                    </p:UpdateListItem.ListId>
                                                                    <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                      <InArgument x:TypeArguments="p1:DynamicValue">
                                                                        <p1:SetDynamicValueProperties>
                                                                          <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                                                            <InArgument x:TypeArguments="x:String" x:Key="CancelLeaveStatus">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                                <p1:ExpressionContainerValue.Arguments>
                                                                                  <InArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                                  </InArgument>
                                                                                </p1:ExpressionContainerValue.Arguments>
                                                                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </scg:Dictionary>
                                                                        </p1:SetDynamicValueProperties>
                                                                      </InArgument>
                                                                    </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                  </p:UpdateListItem>
                                                                  <p1:SetUserStatus DisplayName="Set In Progress">
                                                                    <p1:SetUserStatus.Description>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                          <p1:ExpressionContainerValue.Arguments>
                                                                            <InArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                            </InArgument>
                                                                          </p1:ExpressionContainerValue.Arguments>
                                                                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                        </p1:ExpressionContainerValue>
                                                                      </InArgument>
                                                                    </p1:SetUserStatus.Description>
                                                                  </p1:SetUserStatus>
                                                                </Sequence>
                                                              </p:AppOnlySequence.Body>
                                                            </p:AppOnlySequence>
                                                          </Sequence>
                                                        </State.Entry>
                                                        <State.Transitions>
                                                          <Transition DisplayName="T14" To="{x:Reference __ReferenceID37}" />
                                                        </State.Transitions>
                                                      </State>
                                                    </Transition.To>
                                                  </Transition>
                                                  <Transition DisplayName="T15">
                                                    <Transition.Condition>
                                                      <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="iscancelstate == 1">
                                                        <p1:ExpressionContainerValue.Arguments>
                                                          <InArgument x:TypeArguments="x:Int32" x:Key="iscancelstate">
                                                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID34}" />
                                                          </InArgument>
                                                        </p1:ExpressionContainerValue.Arguments>
                                                        <p1:IsEqual x:TypeArguments="x:Int32">
                                                          <p1:IsEqual.Left>
                                                            <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                                              <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="iscancelstate" />
                                                            </InArgument>
                                                          </p1:IsEqual.Left>
                                                          <p1:IsEqual.Right>
                                                            <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="1" />
                                                          </p1:IsEqual.Right>
                                                        </p1:IsEqual>
                                                      </p1:ExpressionContainerValue>
                                                    </Transition.Condition>
                                                    <Transition.To>
                                                      <State x:Name="__ReferenceID49" DisplayName="Set Status (Teminate)">
                                                        <State.Entry>
                                                          <Sequence>
                                                            <p:AppOnlySequence>
                                                              <p:AppOnlySequence.Body>
                                                                <Sequence DisplayName="Set Status (Teminate">
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:String">
                                                                        <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                          <p1:ExpressionContainerReference.Arguments>
                                                                            <InOutArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                              <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                            </InOutArgument>
                                                                          </p1:ExpressionContainerReference.Arguments>
                                                                          <ArgumentReference x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                        </p1:ExpressionContainerReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:String">Cancelled</InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                  <Sequence>
                                                                    <p:WriteToHistory>
                                                                      <p:WriteToHistory.Message>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Set Status to : &quot;+setStatusRequest">
                                                                            <p1:ExpressionContainerValue.Arguments>
                                                                              <InArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                              </InArgument>
                                                                            </p1:ExpressionContainerValue.Arguments>
                                                                            <p1:ConcatString>
                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Set Status to : " />
                                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                              </InArgument>
                                                                            </p1:ConcatString>
                                                                          </p1:ExpressionContainerValue>
                                                                        </InArgument>
                                                                      </p:WriteToHistory.Message>
                                                                    </p:WriteToHistory>
                                                                    <If>
                                                                      <If.Condition>
                                                                        <InArgument x:TypeArguments="x:Boolean">
                                                                          <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestType.ToLower().Equals(&quot;new&quot;)">
                                                                            <p1:ExpressionContainerValue.Arguments>
                                                                              <InArgument x:TypeArguments="x:String" x:Key="RequestType">
                                                                                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                                                              </InArgument>
                                                                            </p1:ExpressionContainerValue.Arguments>
                                                                            <p1:IsEqualString Pattern="{x:Null}" Text="new">
                                                                              <p1:IsEqualString.Input>
                                                                                <InArgument x:TypeArguments="x:String">
                                                                                  <p1:ToLowerCase>
                                                                                    <InArgument x:TypeArguments="x:String">
                                                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType" />
                                                                                    </InArgument>
                                                                                  </p1:ToLowerCase>
                                                                                </InArgument>
                                                                              </p1:IsEqualString.Input>
                                                                            </p1:IsEqualString>
                                                                          </p1:ExpressionContainerValue>
                                                                        </InArgument>
                                                                      </If.Condition>
                                                                      <If.Then>
                                                                        <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                                                          <p:UpdateListItem.ItemId>
                                                                            <InArgument x:TypeArguments="x:Int32">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="CurrentItemID">
                                                                                <p1:ExpressionContainerValue.Arguments>
                                                                                  <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                                                                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                                                                  </InArgument>
                                                                                </p1:ExpressionContainerValue.Arguments>
                                                                                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </p:UpdateListItem.ItemId>
                                                                          <p:UpdateListItem.ListId>
                                                                            <InArgument x:TypeArguments="s:Guid">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="CurrentListGUID">
                                                                                <p1:ExpressionContainerValue.Arguments>
                                                                                  <InArgument x:TypeArguments="s:Guid" x:Key="CurrentListGUID">
                                                                                    <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID3}" />
                                                                                  </InArgument>
                                                                                </p1:ExpressionContainerValue.Arguments>
                                                                                <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="CurrentListGUID" />
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </p:UpdateListItem.ListId>
                                                                          <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                            <InArgument x:TypeArguments="p1:DynamicValue">
                                                                              <p1:SetDynamicValueProperties>
                                                                                <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                                                                  <InArgument x:TypeArguments="x:String" x:Key="LeaveStatus">
                                                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                                      <p1:ExpressionContainerValue.Arguments>
                                                                                        <InArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                                        </InArgument>
                                                                                      </p1:ExpressionContainerValue.Arguments>
                                                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                                    </p1:ExpressionContainerValue>
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:String" x:Key="CancelLeaveStatus">
                                                                                    <Literal x:TypeArguments="x:String" Value="" />
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:String" x:Key="CancelWorkflow">
                                                                                    <Literal x:TypeArguments="x:String" Value="" />
                                                                                  </InArgument>
                                                                                </scg:Dictionary>
                                                                              </p1:SetDynamicValueProperties>
                                                                            </InArgument>
                                                                          </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                        </p:UpdateListItem>
                                                                      </If.Then>
                                                                      <If.Else>
                                                                        <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                                                          <p:UpdateListItem.ItemId>
                                                                            <InArgument x:TypeArguments="x:Int32">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="CurrentItemID">
                                                                                <p1:ExpressionContainerValue.Arguments>
                                                                                  <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                                                                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                                                                  </InArgument>
                                                                                </p1:ExpressionContainerValue.Arguments>
                                                                                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </p:UpdateListItem.ItemId>
                                                                          <p:UpdateListItem.ListId>
                                                                            <InArgument x:TypeArguments="s:Guid">
                                                                              <p1:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="CurrentListGUID">
                                                                                <p1:ExpressionContainerValue.Arguments>
                                                                                  <InArgument x:TypeArguments="s:Guid" x:Key="CurrentListGUID">
                                                                                    <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID3}" />
                                                                                  </InArgument>
                                                                                </p1:ExpressionContainerValue.Arguments>
                                                                                <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="CurrentListGUID" />
                                                                              </p1:ExpressionContainerValue>
                                                                            </InArgument>
                                                                          </p:UpdateListItem.ListId>
                                                                          <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                            <InArgument x:TypeArguments="p1:DynamicValue">
                                                                              <p1:SetDynamicValueProperties>
                                                                                <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                                                                  <InArgument x:TypeArguments="x:String" x:Key="CancelLeaveStatus">
                                                                                    <Literal x:TypeArguments="x:String" Value="" />
                                                                                  </InArgument>
                                                                                  <InArgument x:TypeArguments="x:String" x:Key="CancelWorkflow">
                                                                                    <Literal x:TypeArguments="x:String" Value="" />
                                                                                  </InArgument>
                                                                                </scg:Dictionary>
                                                                              </p1:SetDynamicValueProperties>
                                                                            </InArgument>
                                                                          </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                                                        </p:UpdateListItem>
                                                                      </If.Else>
                                                                    </If>
                                                                    <p1:SetUserStatus DisplayName="Set In Cancelled">
                                                                      <p1:SetUserStatus.Description>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="setStatusRequest">
                                                                            <p1:ExpressionContainerValue.Arguments>
                                                                              <InArgument x:TypeArguments="x:String" x:Key="setStatusRequest">
                                                                                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                                                                              </InArgument>
                                                                            </p1:ExpressionContainerValue.Arguments>
                                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="setStatusRequest" />
                                                                          </p1:ExpressionContainerValue>
                                                                        </InArgument>
                                                                      </p1:SetUserStatus.Description>
                                                                    </p1:SetUserStatus>
                                                                    <TerminateWorkflow Reason="Cancel by Requester" />
                                                                  </Sequence>
                                                                </Sequence>
                                                              </p:AppOnlySequence.Body>
                                                            </p:AppOnlySequence>
                                                          </Sequence>
                                                        </State.Entry>
                                                        <State.Transitions>
                                                          <Transition DisplayName="T16" To="{x:Reference __ReferenceID38}" />
                                                        </State.Transitions>
                                                      </State>
                                                    </Transition.To>
                                                  </Transition>
                                                </State.Transitions>
                                                <State.Variables>
                                                  <x:Reference>__ReferenceID29</x:Reference>
                                                  <x:Reference>__ReferenceID28</x:Reference>
                                                  <x:Reference>__ReferenceID34</x:Reference>
                                                  <x:Reference>__ReferenceID18</x:Reference>
                                                </State.Variables>
                                              </State>
                                            </Transition.To>
                                          </Transition>
                                        </State.Transitions>
                                      </State>
                                    </Transition.To>
                                  </Transition>
                                  <Transition DisplayName="T9">
                                    <Transition.Condition>
                                      <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestType.ToLower().Equals(&quot;cancel&quot;) || RequestType.ToLower().Equals(&quot;2&quot;)">
                                        <p1:ExpressionContainerValue.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="RequestType">
                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                          </InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="RequestType1">
                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                                          </InArgument>
                                        </p1:ExpressionContainerValue.Arguments>
                                        <p1:Or>
                                          <p1:Or.Left>
                                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                                              <p1:IsEqualString Pattern="{x:Null}" Text="cancel">
                                                <p1:IsEqualString.Input>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ToLowerCase>
                                                      <p1:ToLowerCase.Result>
                                                        <OutArgument x:TypeArguments="x:String" />
                                                      </p1:ToLowerCase.Result>
                                                      <InArgument x:TypeArguments="x:String">
                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType" />
                                                      </InArgument>
                                                    </p1:ToLowerCase>
                                                  </InArgument>
                                                </p1:IsEqualString.Input>
                                              </p1:IsEqualString>
                                            </InArgument>
                                          </p1:Or.Left>
                                          <p1:Or.Right>
                                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                                              <p1:IsEqualString Pattern="{x:Null}" Text="2">
                                                <p1:IsEqualString.Input>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ToLowerCase>
                                                      <p1:ToLowerCase.Result>
                                                        <OutArgument x:TypeArguments="x:String" />
                                                      </p1:ToLowerCase.Result>
                                                      <InArgument x:TypeArguments="x:String">
                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType1" />
                                                      </InArgument>
                                                    </p1:ToLowerCase>
                                                  </InArgument>
                                                </p1:IsEqualString.Input>
                                              </p1:IsEqualString>
                                            </InArgument>
                                          </p1:Or.Right>
                                        </p1:Or>
                                      </p1:ExpressionContainerValue>
                                    </Transition.Condition>
                                    <Transition.To>
                                      <State x:Name="__ReferenceID46" DisplayName="Manager Title Body (Cancel)">
                                        <State.Entry>
                                          <Sequence>
                                            <Sequence DisplayName="Manager">
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="TitleManagerEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="TitleManagerEmail">
                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="TitleManagerEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;แจ้งการขออนุมัติยกเลิกการลาของ &quot; + Title">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <p1:ConcatString>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="แจ้งการขออนุมัติยกเลิกการลาของ " />
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                        </InArgument>
                                                      </p1:ConcatString>
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="BodyManagerEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="BodyManagerEmail">
                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID21}" />
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="BodyManagerEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;กรุณาพิจารณา ยกเลิกการลา &quot; + LeaveType + &quot; ของ &quot; + Title">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                                                        </InArgument>
                                                        <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <p1:ConcatString>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                          <p1:ConcatString>
                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                              <p1:ConcatString>
                                                                <p1:ConcatString.Result>
                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                </p1:ConcatString.Result>
                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="กรุณาพิจารณา ยกเลิกการลา " />
                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveType" />
                                                                </InArgument>
                                                              </p1:ConcatString>
                                                            </InArgument>
                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" ของ " />
                                                          </p1:ConcatString>
                                                        </InArgument>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                        </InArgument>
                                                      </p1:ConcatString>
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                            </Sequence>
                                            <Sequence DisplayName="Requester">
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="TitleRequesterEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="TitleRequesterEmail">
                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="TitleRequesterEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">แจ้งผลการขออนุมัติยกเลิกการลา</InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="BodyRequesterEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="BodyRequesterEmail">
                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="BodyRequesterEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String" xml:space="preserve">การขอยกเลิกการลา ผู้อนุมัติได้พิจารณา </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                            </Sequence>
                                            <Sequence DisplayName="HR">
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="TitleHREmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="TitleHREmail">
                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID36}" />
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="TitleHREmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Review : แจ้งผลการขออนุมัติยกเลิกการลาของ &quot; + Title">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <p1:ConcatString>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Review : แจ้งผลการขออนุมัติยกเลิกการลาของ " />
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                        </InArgument>
                                                      </p1:ConcatString>
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="BodyHrEmail">
                                                      <p1:ExpressionContainerReference.Arguments>
                                                        <InOutArgument x:TypeArguments="x:String" x:Key="BodyHrEmail">
                                                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID35}" />
                                                        </InOutArgument>
                                                      </p1:ExpressionContainerReference.Arguments>
                                                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="BodyHrEmail" />
                                                    </p1:ExpressionContainerReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <p1:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;ตามที่ &quot; + Title + &quot;ได้ขออนุมัติยกเลิกการลา &quot; + LeaveType + &quot; โดยมีผลการพิจารณา คือ &quot;">
                                                      <p1:ExpressionContainerValue.Arguments>
                                                        <InArgument x:TypeArguments="x:String" x:Key="Title">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID17}" />
                                                        </InArgument>
                                                        <InArgument x:TypeArguments="x:String" x:Key="LeaveType">
                                                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                                                        </InArgument>
                                                      </p1:ExpressionContainerValue.Arguments>
                                                      <p1:ConcatString>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                          <p1:ConcatString>
                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                              <p1:ConcatString>
                                                                <p1:ConcatString.Result>
                                                                  <OutArgument x:TypeArguments="x:String" />
                                                                </p1:ConcatString.Result>
                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                  <p1:ConcatString>
                                                                    <p1:ConcatString.Result>
                                                                      <OutArgument x:TypeArguments="x:String" />
                                                                    </p1:ConcatString.Result>
                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="ตามที่ " />
                                                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="Title" />
                                                                    </InArgument>
                                                                  </p1:ConcatString>
                                                                </InArgument>
                                                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="ได้ขออนุมัติยกเลิกการลา " />
                                                              </p1:ConcatString>
                                                            </InArgument>
                                                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="LeaveType" />
                                                            </InArgument>
                                                          </p1:ConcatString>
                                                        </InArgument>
                                                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" โดยมีผลการพิจารณา คือ " />
                                                      </p1:ConcatString>
                                                    </p1:ExpressionContainerValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                            </Sequence>
                                          </Sequence>
                                        </State.Entry>
                                        <State.Transitions>
                                          <Transition DisplayName="T10" To="{x:Reference __ReferenceID39}" />
                                        </State.Transitions>
                                      </State>
                                    </Transition.To>
                                  </Transition>
                                </State.Transitions>
                                <State.Variables>
                                  <x:Reference>__ReferenceID13</x:Reference>
                                </State.Variables>
                              </State>
                            </Transition.To>
                          </Transition>
                        </State.Transitions>
                      </State>
                    </Transition.To>
                  </Transition>
                  <Transition DisplayName="T6">
                    <Transition.Condition>
                      <p1:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestType.ToLower().Equals(&quot;cancel&quot;)|| RequestType.ToLower().Equals(&quot;2&quot;)">
                        <p1:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestType">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestType1">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                          </InArgument>
                        </p1:ExpressionContainerValue.Arguments>
                        <p1:Or>
                          <p1:Or.Left>
                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                              <p1:IsEqualString Pattern="{x:Null}" Text="cancel">
                                <p1:IsEqualString.Input>
                                  <InArgument x:TypeArguments="x:String">
                                    <p1:ToLowerCase>
                                      <p1:ToLowerCase.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p1:ToLowerCase.Result>
                                      <InArgument x:TypeArguments="x:String">
                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType" />
                                      </InArgument>
                                    </p1:ToLowerCase>
                                  </InArgument>
                                </p1:IsEqualString.Input>
                              </p1:IsEqualString>
                            </InArgument>
                          </p1:Or.Left>
                          <p1:Or.Right>
                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                              <p1:IsEqualString Pattern="{x:Null}" Text="2">
                                <p1:IsEqualString.Input>
                                  <InArgument x:TypeArguments="x:String">
                                    <p1:ToLowerCase>
                                      <p1:ToLowerCase.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p1:ToLowerCase.Result>
                                      <InArgument x:TypeArguments="x:String">
                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestType1" />
                                      </InArgument>
                                    </p1:ToLowerCase>
                                  </InArgument>
                                </p1:IsEqualString.Input>
                              </p1:IsEqualString>
                            </InArgument>
                          </p1:Or.Right>
                        </p1:Or>
                      </p1:ExpressionContainerValue>
                    </Transition.Condition>
                    <Transition.To>
                      <State x:Name="__ReferenceID44" DisplayName="Set Status to Inprogress (Cancel)">
                        <State.Entry>
                          <Sequence>
                            <p:AppOnlySequence>
                              <p:AppOnlySequence.Body>
                                <Sequence>
                                  <p:WriteToHistory Message="Request : Cancel" />
                                  <p:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
                                    <p:UpdateListItem.ItemId>
                                      <InArgument x:TypeArguments="x:Int32">
                                        <p1:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="CurrentItemID">
                                          <p1:ExpressionContainerValue.Arguments>
                                            <InArgument x:TypeArguments="x:Int32" x:Key="CurrentItemID">
                                              <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                                            </InArgument>
                                          </p1:ExpressionContainerValue.Arguments>
                                          <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="CurrentItemID" />
                                        </p1:ExpressionContainerValue>
                                      </InArgument>
                                    </p:UpdateListItem.ItemId>
                                    <p:UpdateListItem.ListId>
                                      <InArgument x:TypeArguments="s:Guid">
                                        <p1:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="CurrentListGUID">
                                          <p1:ExpressionContainerValue.Arguments>
                                            <InArgument x:TypeArguments="s:Guid" x:Key="CurrentListGUID">
                                              <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID3}" />
                                            </InArgument>
                                          </p1:ExpressionContainerValue.Arguments>
                                          <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="CurrentListGUID" />
                                        </p1:ExpressionContainerValue>
                                      </InArgument>
                                    </p:UpdateListItem.ListId>
                                    <p:UpdateListItem.ListItemPropertiesDynamicValue>
                                      <InArgument x:TypeArguments="p1:DynamicValue">
                                        <p1:SetDynamicValueProperties>
                                          <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                            <InArgument x:TypeArguments="x:String" x:Key="LeaveStatus">In Progress</InArgument>
                                          </scg:Dictionary>
                                        </p1:SetDynamicValueProperties>
                                      </InArgument>
                                    </p:UpdateListItem.ListItemPropertiesDynamicValue>
                                  </p:UpdateListItem>
                                  <p1:SetUserStatus Description="In Progress" DisplayName="Set In Progress" />
                                </Sequence>
                              </p:AppOnlySequence.Body>
                            </p:AppOnlySequence>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">
                                  <p1:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="ApproveStatus">
                                    <p1:ExpressionContainerReference.Arguments>
                                      <InOutArgument x:TypeArguments="x:String" x:Key="ApproveStatus">
                                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                                      </InOutArgument>
                                    </p1:ExpressionContainerReference.Arguments>
                                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="ApproveStatus" />
                                  </p1:ExpressionContainerReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">In Progress</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </State.Entry>
                        <State.Transitions>
                          <Transition DisplayName="T7" To="{x:Reference __ReferenceID40}" />
                        </State.Transitions>
                      </State>
                    </Transition.To>
                  </Transition>
                </State.Transitions>
              </State>
            </Transition.To>
          </Transition>
        </State.Transitions>
      </State>
    </StateMachine.InitialState>
    <x:Reference>__ReferenceID41</x:Reference>
    <x:Reference>__ReferenceID39</x:Reference>
    <x:Reference>__ReferenceID40</x:Reference>
    <x:Reference>__ReferenceID42</x:Reference>
    <x:Reference>__ReferenceID38</x:Reference>
    <x:Reference>__ReferenceID43</x:Reference>
    <x:Reference>__ReferenceID44</x:Reference>
    <x:Reference>__ReferenceID37</x:Reference>
    <x:Reference>__ReferenceID45</x:Reference>
    <x:Reference>__ReferenceID46</x:Reference>
    <x:Reference>__ReferenceID47</x:Reference>
    <x:Reference>__ReferenceID48</x:Reference>
    <x:Reference>__ReferenceID49</x:Reference>
    <StateMachine.Variables>
      <x:Reference>__ReferenceID2</x:Reference>
      <x:Reference>__ReferenceID1</x:Reference>
      <x:Reference>__ReferenceID3</x:Reference>
      <x:Reference>__ReferenceID17</x:Reference>
      <x:Reference>__ReferenceID15</x:Reference>
      <x:Reference>__ReferenceID50</x:Reference>
      <x:Reference>__ReferenceID19</x:Reference>
      <x:Reference>__ReferenceID11</x:Reference>
      <x:Reference>__ReferenceID12</x:Reference>
      <x:Reference>__ReferenceID51</x:Reference>
      <x:Reference>__ReferenceID25</x:Reference>
      <x:Reference>__ReferenceID9</x:Reference>
      <x:Reference>__ReferenceID23</x:Reference>
      <Variable x:TypeArguments="x:String" Name="CancelLeaveStatus" />
      <x:Reference>__ReferenceID20</x:Reference>
      <x:Reference>__ReferenceID21</x:Reference>
      <x:Reference>__ReferenceID24</x:Reference>
      <x:Reference>__ReferenceID10</x:Reference>
      <x:Reference>__ReferenceID27</x:Reference>
      <x:Reference>__ReferenceID26</x:Reference>
      <x:Reference>__ReferenceID36</x:Reference>
      <x:Reference>__ReferenceID35</x:Reference>
      <x:Reference>__ReferenceID7</x:Reference>
      <x:Reference>__ReferenceID6</x:Reference>
      <x:Reference>__ReferenceID5</x:Reference>
    </StateMachine.Variables>
  </StateMachine>
</Activity>